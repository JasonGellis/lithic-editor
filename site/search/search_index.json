{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lithic Editor and Annotator","text":"Lithic Editor and Annotator <p>Advanced image processing tool for archaeological lithic analysis with ripple removal, cortex preservation, neural network upscaling, and image annotation</p> <p>Key Features</p> <ul> <li>Intelligent Ripple Removal - Advanced algorithms distinguish between structural elements and scar ripples</li> <li>Precise Annotations - Add directional arrows to indicate striking patterns</li> <li>Enhanced Image Quality - Neural network upscaling and DPI enhancement for detailed analysis and visualization</li> <li>Easy to Use - Intuitive GUI and command-line interface</li> <li> Python API - Programmatic access for batch processing and integration with analysis workflows</li> </ul>"},{"location":"#what-is-lithic-editor","title":"What is Lithic Editor?","text":"<p>Lithic Editor and Annotator is a comprehensive image processing tool designed for preparing archaeological lithic illustrations. It combines advanced computer vision techniques with domain-specific knowledge to edit and enhance technical drawings of stone tool artifacts. The software addresses multiple challenges in lithic illustration preparation and enhancement:</p> <ul> <li> <p>Automated Ripple Line Removal: Uses sophisticated graph-based algorithms to identify and remove hatching/ripple lines while   preserving essential structural elements and cortex features of the drawing.</p> </li> <li> <p>Cortex Preservation: Distinguishes between structural elements and    cortex stippling, ensuring that important surface texture information is maintained    during processing.</p> </li> <li> <p>Neural Network Upscaling: Employs deep learning models to   enhance low-resolution images, upscaling drawings below 300 DPI for   improved detail and analysis quality.</p> </li> <li> <p>Technical Annotation System: Provides intuitive tools for replacing scar ripples    with directional arrows to indicate striking direction and flake scar patterns,   enabling clear communication of technological information.</p> </li> <li> <p>Flexible Integration: Offers GUI, command-line, and Python API interfaces for   seamless integration into diverse archaeological analysis workflows.</p> </li> </ul>"},{"location":"#visual-example","title":"Visual Example","text":"Before Processing <p>Original drawing with ripple lines</p> After Processing <p>Clean structural elements preserved</p>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<ul> <li>Archaeologists working with lithic illustrations</li> <li>Researchers creating publication ready images</li> <li>Museum Curators preparing artifact documentation</li> <li>Students studying archaeological illustration techniques</li> </ul>"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> </ul>"},{"location":"#next-steps","title":"Next Steps","text":"<p>Follow the installation guide to set up Lithic Editor on your computer.</p> <p>Acknowledgements</p> <p>Thank you to The British Academy for funding this project. Thank you to Professor Robert A. Foley for support and advice.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#image-processing-pipeline","title":"Image Processing Pipeline","text":""},{"location":"features/#processing-workflow","title":"Processing Workflow","text":"Processing Steps Input &amp; Preprocessing <p>1. Image Loading and Metadata Extraction Reads image files and extracts embedded DPI information from EXIF metadata. Supports PNG, JPEG, TIFF, and BMP formats.</p> <p>2. Grayscale Conversion Converts color images to 8-bit grayscale using luminance-preserving algorithms for consistent processing.</p> <p>3. Neural Network Upscaling (Optional) Detects DPI from image metadata or prompts user for DPI selection. Upscales low-DPI images using ESPCN or FSRCNN models while maintaining aspect ratio and line quality to improve detail preservation.</p> <p>4. Binary Thresholding Converts to grayscale if needed and employs Otsu's adaptive thresholding to create binary image, separating foreground lines from background.</p> <p>5. Cortex Separation Separates cortex stippling from structural lines using DPI-adaptive connected component analysis. Preserves cortex areas before skeletonization to prevent destruction during processing.</p> <p>6. Morphological Operations Applies targeted morphological transformations exclusively to structural elements:</p> <ul> <li>Dilation strengthens thin lines</li> <li>Closing bridges small gaps</li> <li>Opening smooths irregular edges</li> </ul> Structural Analysis &amp; Ripple Detection <p>7. Skeletonization Reduces lines to single-pixel width using morphological thinning while preserving connectivity and topology to create network representation.</p> <p>8. Junction and Endpoint Detection Analyzes skeleton connectivity to identify line terminations (endpoints) and intersections (junctions) through neighbor counting.</p> <p>9. Line Segmentation Detects individual line segments and calculates orientation and length, creating discrete segments for individual analysis.</p> <p>10. Graph Construction Builds connectivity graph using NetworkX with segments as edges and junctions/endpoints as nodes.</p> <p>11. Ripple Identification Identifies parallel line patterns and analyzes spacing consistency to classify segments as ripple or structural elements.</p> <p>12. Selective Removal Removes identified ripple lines while preserving structural boundaries to maintain artifact integrity.</p> Output Generation <p>13. Thickness Reconstruction Applies controlled dilation to restore original line thickness while maintaining clean edges.</p> <p>14. Quality Enhancement Implements anti-aliasing and smoothing algorithms to produce publication-quality output.</p> <p>15. Final Assembly Combines cleaned structural lines with preserved cortex and refines endpoint decisions after cleaning to create final archaeologically accurate result.</p> <p>16. Final Output Produces cleaned image with proper contrast orientation and preserved metadata for publication use.</p> <pre><code>flowchart TB\n    subgraph section1 [\"Input &amp; Preprocessing\"]\n        direction TB\n        subgraph row1a [\" \"]\n            direction LR\n            A[\"Load Image\"] --&gt; B[\"Extract Metadata\"]\n            B --&gt; C[\"Convert to Grayscale\"]\n            C --&gt; D{\"`DPI &lt; 300?`\"}\n            D --&gt;|Yes| E[\"Neural Network&lt;br/&gt;Upscaling\"]\n            D --&gt;|No| F[\"Binary Threshold\"]\n            E --&gt; F\n        end\n\n        subgraph row1b [\" \"]\n            direction LR\n            G[\"Separate Cortex\"] --&gt; H[\"Morphological&lt;br/&gt;Operations\"]\n        end\n\n        F --&gt; G\n    end\n\n    subgraph section2 [\"Structural Analysis &amp; Ripple Detection\"]\n        direction TB\n        subgraph row2a [\" \"]\n            direction LR\n            I[\"Skeletonization\"] --&gt; J[\"Junction/Endpoint&lt;br/&gt;Detection\"]\n            J --&gt; K[\"Line Segmentation\"]\n        end\n\n        subgraph row2b [\" \"]\n            direction LR\n            L[\"Graph Construction\"] --&gt; M[\"Ripple&lt;br/&gt;Identification\"]\n            M --&gt; N[\"Structural Mask&lt;br/&gt;Creation\"]\n        end\n\n        K --&gt; L\n    end\n\n    subgraph section3 [\"Output Generation\"]\n        direction LR\n        O[\"Thickness&lt;br/&gt;Reconstruction\"] --&gt; P[\"Quality&lt;br/&gt;Enhancement\"]\n        P --&gt; Q[\"Cortex&lt;br/&gt;Restoration\"]\n        Q --&gt; R[\"Final Output\"]\n    end\n\n    H --&gt; I\n    N --&gt; O\n\n    style D fill:#f9f,stroke:#333,stroke-width:2px\n    style E fill:#bbf,stroke:#333,stroke-width:2px\n    style section1 fill:#f8f9fa,stroke:#dee2e6,stroke-width:2px\n    style section2 fill:#fff3cd,stroke:#ffeaa7,stroke-width:2px\n    style section3 fill:#d1ecf1,stroke:#bee5eb,stroke-width:2px\n    style row1a fill:transparent,stroke:none\n    style row1b fill:transparent,stroke:none\n    style row2a fill:transparent,stroke:none\n    style row2b fill:transparent,stroke:none</code></pre>"},{"location":"api-reference/cli-reference/","title":"CLI Reference","text":"<p>Complete command-line interface reference for Lithic Editor.</p>"},{"location":"api-reference/cli-reference/#global-options","title":"Global Options","text":"<pre><code>lithic-editor [OPTIONS] COMMAND [ARGS]\n</code></pre> Option Short Description <code>--version</code> Show version and exit <code>--help</code> <code>-h</code> Show help message <code>--gui</code> Launch GUI directly"},{"location":"api-reference/cli-reference/#commands","title":"Commands","text":""},{"location":"api-reference/cli-reference/#gui","title":"gui","text":"<p>Launch the graphical user interface.</p> <pre><code>lithic-editor gui\n</code></pre> <p>Examples: <pre><code># Launch GUI\nlithic-editor gui\n\n# Alternative: use global flag\nlithic-editor --gui\n</code></pre></p>"},{"location":"api-reference/cli-reference/#process","title":"process","text":"<p>Process lithic drawings from the command line.</p> <pre><code>lithic-editor process IMAGE_PATH [OPTIONS]\n</code></pre> <p>Arguments: - <code>IMAGE_PATH</code> - Path to input lithic drawing image (required)</p> <p>Options:</p> Option Short Default Description <code>--output</code> <code>-o</code> <code>image_debug</code> Output directory <code>--debug</code> <code>False</code> Save debug images and processing steps <code>--quiet</code> <code>-q</code> <code>False</code> Suppress output <code>--auto-upscale</code> <code>False</code> Automatically upscale images below target DPI <code>--default-dpi</code> <code>None</code> Default DPI to assume for images without metadata <code>--upscale-model</code> <code>espcn</code> Model to use for upscaling (espcn, fsrcnn) <code>--upscale-threshold</code> <code>300</code> DPI threshold for upscaling <code>--no-preserve-cortex</code> <code>False</code> Disable cortex stippling preservation <p>Examples:</p> <pre><code># Basic processing\nlithic-editor process drawing.png\n\n# Specify output directory\nlithic-editor process drawing.png --output results/\n\n# Save debug images and processing steps\nlithic-editor process drawing.png --debug\n\n# Quiet mode (no output)\nlithic-editor process drawing.png --quiet\n\n# Combine options\nlithic-editor process artifact.png -o output/ --debug --quiet\n\n# Neural network upscaling for low-DPI images\nlithic-editor process low_dpi.png --auto-upscale --default-dpi 150\n\n# Use FSRCNN model with custom threshold\nlithic-editor process drawing.png --upscale-model fsrcnn --upscale-threshold 250\n\n# Disable cortex preservation for specific images\nlithic-editor process artifact.png --no-preserve-cortex --debug\n</code></pre>"},{"location":"api-reference/cli-reference/#docs","title":"docs","text":"<p>Access documentation.</p> <pre><code>lithic-editor docs [OPTIONS]\n</code></pre> <p>Options:</p> Option Description <code>--offline</code> Serve documentation locally <p>Examples:</p> <pre><code># Open online documentation\nlithic-editor docs\n\n# Serve documentation locally\nlithic-editor docs --offline\n</code></pre>"},{"location":"api-reference/cli-reference/#help","title":"help","text":"<p>Show detailed help information.</p> <pre><code>lithic-editor help [TOPIC]\n</code></pre> <p>Topics: - <code>api</code> - Show Python API usage examples</p> <p>Examples:</p> <pre><code># Show general help\nlithic-editor help\n\n# Show API help\nlithic-editor help api\n</code></pre>"},{"location":"api-reference/cli-reference/#exit-codes","title":"Exit Codes","text":"Code Meaning 0 Success 1 General error 2 Command line syntax error 3 File not found 4 Permission denied"},{"location":"api-reference/cli-reference/#environment-variables","title":"Environment Variables","text":""},{"location":"api-reference/cli-reference/#lithic_output_dir","title":"LITHIC_OUTPUT_DIR","text":"<p>Default output directory for processed images.</p> <pre><code>export LITHIC_OUTPUT_DIR=/path/to/output\nlithic-editor process image.png  # Uses LITHIC_OUTPUT_DIR\n</code></pre>"},{"location":"api-reference/cli-reference/#lithic_debug","title":"LITHIC_DEBUG","text":"<p>Enable debug mode by default.</p> <pre><code>export LITHIC_DEBUG=1\nlithic-editor process image.png  # Debug enabled\n</code></pre>"},{"location":"api-reference/cli-reference/#shell-completion","title":"Shell Completion","text":""},{"location":"api-reference/cli-reference/#bash","title":"Bash","text":"<p>Add to <code>~/.bashrc</code>:</p> <pre><code>eval \"$(_LITHIC_EDITOR_COMPLETE=bash_source lithic-editor)\"\n</code></pre>"},{"location":"api-reference/cli-reference/#zsh","title":"Zsh","text":"<p>Add to <code>~/.zshrc</code>:</p> <pre><code>eval \"$(_LITHIC_EDITOR_COMPLETE=zsh_source lithic-editor)\"\n</code></pre>"},{"location":"api-reference/cli-reference/#fish","title":"Fish","text":"<p>Add to <code>~/.config/fish/completions/lithic-editor.fish</code>:</p> <pre><code>eval (env _LITHIC_EDITOR_COMPLETE=fish_source lithic-editor)\n</code></pre>"},{"location":"api-reference/cli-reference/#batch-processing","title":"Batch Processing","text":""},{"location":"api-reference/cli-reference/#using-shell-loops","title":"Using Shell Loops","text":"<pre><code># Process all PNG files\nfor file in *.png; do\n    lithic-editor process \"$file\" --output \"processed/${file%.png}/\"\ndone\n\n# Process with parallel\nfind . -name \"*.png\" | parallel -j 4 lithic-editor process {} --output {.}/\n\n# Process and log results\nfor file in drawings/*.png; do\n    echo \"Processing $file...\"\n    if lithic-editor process \"$file\" --quiet; then\n        echo \"\u2713 $file\" &gt;&gt; success.log\n    else\n        echo \"\u2717 $file\" &gt;&gt; failed.log\n    fi\ndone\n</code></pre>"},{"location":"api-reference/cli-reference/#using-find-and-xargs","title":"Using Find and Xargs","text":"<pre><code># Process all images recursively\nfind . -type f \\( -name \"*.png\" -o -name \"*.jpg\" \\) \\\n    -exec lithic-editor process {} --output {}_processed/ \\;\n\n# Parallel processing with xargs\nfind drawings/ -name \"*.png\" -print0 | \\\n    xargs -0 -n 1 -P 4 -I {} lithic-editor process {} --quiet\n</code></pre>"},{"location":"api-reference/cli-reference/#scripting-examples","title":"Scripting Examples","text":""},{"location":"api-reference/cli-reference/#processing-script","title":"Processing Script","text":"<pre><code>#!/bin/bash\n# process_lithics.sh - Batch process lithic drawings\n\nINPUT_DIR=\"${1:-./drawings}\"\nOUTPUT_DIR=\"${2:-./processed}\"\nLOG_FILE=\"processing.log\"\n\n# Create output directory\nmkdir -p \"$OUTPUT_DIR\"\n\n# Initialize log\necho \"Processing started: $(date)\" &gt; \"$LOG_FILE\"\n\n# Process counter\nSUCCESS=0\nFAILED=0\n\n# Process each image\nfor image in \"$INPUT_DIR\"/*.{png,jpg,jpeg,tif,tiff} 2&gt;/dev/null; do\n    [ -f \"$image\" ] || continue\n\n    basename=$(basename \"$image\")\n    echo \"Processing: $basename\"\n\n    if lithic-editor process \"$image\" \\\n        --output \"$OUTPUT_DIR/${basename%.*}\" \\\n        --debug --quiet; then\n        ((SUCCESS++))\n        echo \"\u2713 $basename\" &gt;&gt; \"$LOG_FILE\"\n    else\n        ((FAILED++))\n        echo \"\u2717 $basename\" &gt;&gt; \"$LOG_FILE\"\n    fi\ndone\n\n# Summary\necho \"Completed: $SUCCESS successful, $FAILED failed\" | tee -a \"$LOG_FILE\"\n</code></pre>"},{"location":"api-reference/cli-reference/#watch-folder-script","title":"Watch Folder Script","text":"<pre><code>#!/bin/bash\n# watch_folder.sh - Auto-process new images\n\nWATCH_DIR=\"${1:-./incoming}\"\nOUTPUT_DIR=\"${2:-./processed}\"\n\necho \"Watching $WATCH_DIR for new images...\"\n\n# Using inotify (Linux)\ninotifywait -m -e create -e moved_to \"$WATCH_DIR\" |\nwhile read -r directory event filename; do\n    if [[ \"$filename\" =~ \\.(png|jpg|jpeg|tif|tiff)$ ]]; then\n        echo \"Processing new file: $filename\"\n        lithic-editor process \"$WATCH_DIR/$filename\" \\\n            --output \"$OUTPUT_DIR/${filename%.*}\"\n    fi\ndone\n\n# Using fswatch (macOS)\nfswatch -0 \"$WATCH_DIR\" | while read -d \"\" path; do\n    filename=$(basename \"$path\")\n    if [[ \"$filename\" =~ \\.(png|jpg|jpeg|tif|tiff)$ ]]; then\n        echo \"Processing: $filename\"\n        lithic-editor process \"$path\" \\\n            --output \"$OUTPUT_DIR/${filename%.*}\"\n    fi\ndone\n</code></pre>"},{"location":"api-reference/cli-reference/#docker-usage","title":"Docker Usage","text":"<pre><code># Dockerfile\nFROM python:3.9\nRUN pip install git+https://github.com/JasonGellis/lithic-editor.git\nENTRYPOINT [\"lithic-editor\"]\n</code></pre> <pre><code># Build image\ndocker build -t lithic-editor .\n\n# Process image\ndocker run -v $(pwd):/data lithic-editor \\\n    process /data/drawing.png --output /data/output/\n\n# Run GUI (requires X11)\ndocker run -e DISPLAY=$DISPLAY \\\n    -v /tmp/.X11-unix:/tmp/.X11-unix \\\n    -v $(pwd):/data \\\n    lithic-editor gui\n</code></pre>"},{"location":"api-reference/cli-reference/#performance-optimization","title":"Performance Optimization","text":""},{"location":"api-reference/cli-reference/#memory-management","title":"Memory Management","text":"<pre><code># Limit memory usage\nulimit -v 2097152  # 2GB limit\nlithic-editor process large_image.png\n\n# Nice level for background processing\nnice -n 19 lithic-editor process image.png\n</code></pre>"},{"location":"api-reference/cli-reference/#parallel-processing","title":"Parallel Processing","text":"<pre><code># GNU Parallel\nparallel -j 4 lithic-editor process {} ::: *.png\n\n# Custom parallel script\n#!/bin/bash\nMAX_JOBS=4\nfor file in *.png; do\n    while [ $(jobs -r | wc -l) -ge $MAX_JOBS ]; do\n        sleep 1\n    done\n    lithic-editor process \"$file\" &amp;\ndone\nwait\n</code></pre>"},{"location":"api-reference/cli-reference/#troubleshooting","title":"Troubleshooting","text":""},{"location":"api-reference/cli-reference/#debug-mode","title":"Debug Mode","text":"<pre><code># Enable verbose output\nlithic-editor process image.png --debug\n\n# Check version and environment\nlithic-editor --version\n\n# Test with sample image\nlithic-editor process --help\n</code></pre>"},{"location":"api-reference/cli-reference/#common-issues","title":"Common Issues","text":"<p>Permission Denied: <pre><code># Check permissions\nls -la image.png\n# Fix permissions\nchmod 644 image.png\n</code></pre></p> <p>Output Directory Issues: <pre><code># Create output directory first\nmkdir -p output/\nlithic-editor process image.png --output output/\n</code></pre></p> <p>Large File Processing: <pre><code># Increase timeout for large files\ntimeout 300 lithic-editor process large_image.tiff\n</code></pre></p>"},{"location":"api-reference/cli-reference/#integration-examples","title":"Integration Examples","text":""},{"location":"api-reference/cli-reference/#makefile","title":"Makefile","text":"<pre><code># Makefile for lithic processing\n\nINPUT_DIR = drawings\nOUTPUT_DIR = processed\nIMAGES = $(wildcard $(INPUT_DIR)/*.png)\nOUTPUTS = $(patsubst $(INPUT_DIR)/%.png,$(OUTPUT_DIR)/%/9_high_quality.png,$(IMAGES))\n\nall: $(OUTPUTS)\n\n$(OUTPUT_DIR)/%/9_high_quality.png: $(INPUT_DIR)/%.png\n    @mkdir -p $(dir $@)\n    lithic-editor process $&lt; --output $(OUTPUT_DIR)/$*\n\nclean:\n    rm -rf $(OUTPUT_DIR)\n\n.PHONY: all clean\n</code></pre>"},{"location":"api-reference/cli-reference/#git-hook","title":"Git Hook","text":"<pre><code>#!/bin/bash\n# .git/hooks/pre-commit\n# Process lithic images before commit\n\nfor file in $(git diff --cached --name-only | grep -E '\\.(png|jpg)$'); do\n    if [[ \"$file\" == drawings/* ]]; then\n        echo \"Processing $file...\"\n        lithic-editor process \"$file\" --output \"processed/${file#drawings/}\"\n        git add \"processed/${file#drawings/}\"\n    fi\ndone\n</code></pre>"},{"location":"api-reference/introduction/","title":"API Reference","text":"<p>The Lithic Editor provides multiple interfaces for integrating with your workflow:</p>"},{"location":"api-reference/introduction/#available-apis","title":"Available APIs","text":""},{"location":"api-reference/introduction/#python-api","title":"Python API","text":"<p>Programmatic access to all processing functions for integration into your Python scripts and applications.</p> <pre><code>from lithic_editor.processing import process_lithic_drawing\nresult = process_lithic_drawing(\"artifact.png\")\n</code></pre>"},{"location":"api-reference/introduction/#command-line-interface","title":"Command Line Interface","text":"<p>Complete CLI for processing images, batch operations, and automation workflows.</p> <pre><code>lithic-editor process drawing.png --output results/\n</code></pre>"},{"location":"api-reference/introduction/#quick-examples","title":"Quick Examples","text":""},{"location":"api-reference/introduction/#basic-processing","title":"Basic Processing","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing\n\n# Simple processing\nresult = process_lithic_drawing(\"lithic_drawing.png\")\n\n# With options\nresult = process_lithic_drawing(\n    image_path=\"drawing.png\",\n    output_folder=\"output\",\n    save_debug=True,\n    output_dpi=300\n)\n</code></pre>"},{"location":"api-reference/introduction/#batch-processing","title":"Batch Processing","text":"<pre><code>from pathlib import Path\nfrom lithic_editor.processing import process_lithic_drawing\n\n# Process all images in a directory\nfor image_file in Path(\"drawings\").glob(\"*.png\"):\n    result = process_lithic_drawing(str(image_file))\n    print(f\"Processed: {image_file.name}\")\n</code></pre>"},{"location":"api-reference/introduction/#integration-example","title":"Integration Example","text":"<pre><code>import numpy as np\nfrom PIL import Image\nfrom lithic_editor.processing import process_lithic_drawing\n\ndef process_with_preprocessing(image_path):\n    \"\"\"Custom preprocessing before lithic processing.\"\"\"\n    # Load and preprocess\n    img = Image.open(image_path)\n    img = img.convert('L')  # Convert to grayscale\n\n    # Save preprocessed image\n    temp_path = \"temp_preprocessed.png\"\n    img.save(temp_path)\n\n    # Process with lithic editor\n    result = process_lithic_drawing(temp_path)\n    return result\n</code></pre>"},{"location":"api-reference/introduction/#return-values","title":"Return Values","text":"<p>The <code>process_lithic_drawing</code> function returns a dictionary containing:</p> <pre><code>{\n    'success': bool,           # Processing status\n    'output_path': str,        # Path to processed image\n    'debug_folder': str,       # Path to debug images (if save_debug=True)\n    'processing_time': float, # Time taken in seconds\n    'image_info': {\n        'width': int,\n        'height': int,\n        'dpi': tuple,          # (x_dpi, y_dpi)\n        'format': str          # Image format\n    }\n}\n</code></pre>"},{"location":"api-reference/introduction/#error-handling","title":"Error Handling","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing\n\ntry:\n    result = process_lithic_drawing(\"drawing.png\")\n    if result['success']:\n        print(f\"Processed successfully: {result['output_path']}\")\n    else:\n        print(\"Processing failed\")\nexcept FileNotFoundError:\n    print(\"Image file not found\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api-reference/introduction/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Python API for detailed function documentation</li> <li>Review the CLI Reference for command-line usage</li> <li>See Processing Guide for workflow ideas</li> </ul>"},{"location":"api-reference/overview/","title":"API Reference","text":"<p>The Lithic Editor provides multiple interfaces for integrating with your workflow:</p>"},{"location":"api-reference/overview/#available-apis","title":"Available APIs","text":""},{"location":"api-reference/overview/#python-api","title":"Python API","text":"<p>Programmatic access to all processing functions for integration into your Python scripts and applications.</p> <pre><code>from lithic_editor.processing import process_lithic_drawing\nresult = process_lithic_drawing(\"artifact.png\")\n</code></pre>"},{"location":"api-reference/overview/#command-line-interface","title":"Command Line Interface","text":"<p>Complete CLI for processing images, batch operations, and automation workflows.</p> <pre><code>lithic-editor process drawing.png --output results/\n</code></pre>"},{"location":"api-reference/overview/#quick-examples","title":"Quick Examples","text":""},{"location":"api-reference/overview/#basic-processing","title":"Basic Processing","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing\n\n# Simple processing\nresult = process_lithic_drawing(\"lithic_drawing.png\")\n\n# With options\nresult = process_lithic_drawing(\n    image_path=\"drawing.png\",\n    output_folder=\"output\",\n    save_debug=True,\n    output_dpi=300\n)\n</code></pre>"},{"location":"api-reference/overview/#batch-processing","title":"Batch Processing","text":"<pre><code>from pathlib import Path\nfrom lithic_editor.processing import process_lithic_drawing\n\n# Process all images in a directory\nfor image_file in Path(\"drawings\").glob(\"*.png\"):\n    result = process_lithic_drawing(str(image_file))\n    print(f\"Processed: {image_file.name}\")\n</code></pre>"},{"location":"api-reference/overview/#integration-example","title":"Integration Example","text":"<pre><code>import numpy as np\nfrom PIL import Image\nfrom lithic_editor.processing import process_lithic_drawing\n\ndef process_with_preprocessing(image_path):\n    \"\"\"Custom preprocessing before lithic processing.\"\"\"\n    # Load and preprocess\n    img = Image.open(image_path)\n    img = img.convert('L')  # Convert to grayscale\n\n    # Save preprocessed image\n    temp_path = \"temp_preprocessed.png\"\n    img.save(temp_path)\n\n    # Process with lithic editor\n    result = process_lithic_drawing(temp_path)\n    return result\n</code></pre>"},{"location":"api-reference/overview/#return-values","title":"Return Values","text":"<p>The <code>process_lithic_drawing</code> function returns a dictionary containing:</p> <pre><code>{\n    'success': bool,           # Processing status\n    'output_path': str,        # Path to processed image\n    'debug_folder': str,       # Path to debug images (if save_debug=True)\n    'processing_time': float, # Time taken in seconds\n    'image_info': {\n        'width': int,\n        'height': int,\n        'dpi': tuple,          # (x_dpi, y_dpi)\n        'format': str          # Image format\n    }\n}\n</code></pre>"},{"location":"api-reference/overview/#error-handling","title":"Error Handling","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing\n\ntry:\n    result = process_lithic_drawing(\"drawing.png\")\n    if result['success']:\n        print(f\"Processed successfully: {result['output_path']}\")\n    else:\n        print(\"Processing failed\")\nexcept FileNotFoundError:\n    print(\"Image file not found\")\nexcept Exception as e:\n    print(f\"Error: {e}\")\n</code></pre>"},{"location":"api-reference/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Explore the Python API for detailed function documentation</li> <li>Review the CLI Reference for command-line usage</li> <li>See Integration Examples for workflow ideas</li> </ul>"},{"location":"api-reference/python-api/","title":"Python API","text":"<p>Complete reference for the Lithic Editor Python API.</p>"},{"location":"api-reference/python-api/#core-functions","title":"Core Functions","text":""},{"location":"api-reference/python-api/#process_lithic_drawing","title":"process_lithic_drawing","text":"<p>The main processing function for removing ripple lines from lithic drawings.</p> <pre><code>process_lithic_drawing(\n    image_path: str,\n    output_folder: str = \"image_debug\",\n    dpi_info: Optional[Tuple[int, int]] = None,\n    format_info: Optional[str] = None,\n    output_dpi: Optional[int] = None,\n    save_debug: bool = False,\n    upscale_low_dpi: bool = False,\n    default_dpi: Optional[int] = None,\n    upscale_model: str = 'espcn',\n    target_dpi: int = 300,\n    scale_image_path: Optional[str] = None,\n    return_scale_factor: bool = False,\n    debug_filename: Optional[str] = None\n) -&gt; Union[np.ndarray, Dict[str, Any]]\n</code></pre>"},{"location":"api-reference/python-api/#parameters","title":"Parameters","text":"Parameter Type Default Description <code>image_path</code> <code>str</code> required Path to the input image file <code>output_folder</code> <code>str</code> <code>\"image_debug\"</code> Directory for output files <code>dpi_info</code> <code>tuple</code> <code>None</code> Override DPI as (x_dpi, y_dpi) <code>format_info</code> <code>str</code> <code>None</code> Override output format (png, jpg, tiff) <code>output_dpi</code> <code>int</code> <code>None</code> Set specific output DPI <code>save_debug</code> <code>bool</code> <code>False</code> Save intermediate processing steps to disk <code>upscale_low_dpi</code> <code>bool</code> <code>False</code> Enable neural network upscaling for low-DPI images <code>default_dpi</code> <code>int</code> <code>None</code> DPI to assume if metadata missing <code>upscale_model</code> <code>str</code> <code>'espcn'</code> Model to use: 'espcn' or 'fsrcnn' <code>target_dpi</code> <code>int</code> <code>300</code> Target DPI for upscaling <code>scale_image_path</code> <code>str</code> <code>None</code> Scale image to process with same factor <code>return_scale_factor</code> <code>bool</code> <code>False</code> Return upscaling details in result <code>debug_filename</code> <code>str</code> <code>None</code> Custom filename for debug images <code>preserve_cortex</code> <code>bool</code> <code>True</code> Preserve cortex stippling (default: enabled)"},{"location":"api-reference/python-api/#returns","title":"Returns","text":"<p>Dictionary containing: - <code>success</code> (bool): Whether processing completed successfully - <code>output_path</code> (str): Path to the processed image - <code>debug_folder</code> (str): Path to debug images directory - <code>processing_time</code> (float): Processing duration in seconds - <code>image_info</code> (dict): Image metadata</p>"},{"location":"api-reference/python-api/#example-usage","title":"Example Usage","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing\n\n# Basic usage\nresult = process_lithic_drawing(\"artifact.png\")\n\n# With all options including upscaling\nresult = process_lithic_drawing(\n    image_path=\"drawing.png\",\n    output_folder=\"results\",\n    dpi_info=(300, 300),\n    format_info=\"png\",\n    output_dpi=300,\n    save_debug=True,\n    upscale_low_dpi=True,\n    default_dpi=150,\n    upscale_model='fsrcnn',\n    target_dpi=300,\n    preserve_cortex=True\n)\n\n# Check results\nif result['success']:\n    print(f\"Output: {result['output_path']}\")\n    print(f\"Processing time: {result['processing_time']:.2f}s\")\n</code></pre>"},{"location":"api-reference/python-api/#annotation-classes","title":"Annotation Classes","text":""},{"location":"api-reference/python-api/#arrow","title":"Arrow","text":"<p>Class for managing directional arrows in lithic drawings.</p> <pre><code>from lithic_editor.annotations import Arrow\n\n# Create an arrow\narrow = Arrow(\n    start_point=(100, 100),\n    end_point=(200, 150),\n    color='black',\n    width=2\n)\n\n# Add to image\narrow.draw(image)\n</code></pre>"},{"location":"api-reference/python-api/#methods","title":"Methods","text":""},{"location":"api-reference/python-api/#__init__start_point-end_point-colorblack-width2","title":"<code>__init__(start_point, end_point, color='black', width=2)</code>","text":"<p>Initialize an arrow annotation.</p>"},{"location":"api-reference/python-api/#drawimage-npndarray","title":"<code>draw(image) -&gt; np.ndarray</code>","text":"<p>Draw the arrow on an image.</p>"},{"location":"api-reference/python-api/#rotateangle-float-center-tuple-none","title":"<code>rotate(angle: float, center: tuple) -&gt; None</code>","text":"<p>Rotate the arrow around a center point.</p>"},{"location":"api-reference/python-api/#scalefactor-float-none","title":"<code>scale(factor: float) -&gt; None</code>","text":"<p>Scale the arrow size.</p>"},{"location":"api-reference/python-api/#image-processing-utilities","title":"Image Processing Utilities","text":""},{"location":"api-reference/python-api/#load_image","title":"load_image","text":"<p>Load and validate an image file.</p> <pre><code>from lithic_editor.utils import load_image\n\nimage, metadata = load_image(\"drawing.png\")\nprint(f\"Image shape: {image.shape}\")\nprint(f\"DPI: {metadata.get('dpi', 'Not set')}\")\n</code></pre>"},{"location":"api-reference/python-api/#save_with_metadata","title":"save_with_metadata","text":"<p>Save an image preserving metadata.</p> <pre><code>from lithic_editor.utils import save_with_metadata\n\nsave_with_metadata(\n    image_array,\n    output_path=\"result.png\",\n    dpi=(300, 300),\n    format=\"PNG\"\n)\n</code></pre>"},{"location":"api-reference/python-api/#advanced-usage","title":"Advanced Usage","text":""},{"location":"api-reference/python-api/#custom-processing-pipeline","title":"Custom Processing Pipeline","text":"<pre><code>from lithic_editor.processing import (\n    process_lithic_drawing,\n    apply_skeleton,\n    detect_ripples\n)\nfrom lithic_editor.utils import load_image, save_with_metadata\n\ndef custom_pipeline(image_path):\n    \"\"\"Custom processing with intermediate steps.\"\"\"\n\n    # Load image\n    image, metadata = load_image(image_path)\n\n    # Step 1: Create skeleton\n    skeleton = apply_skeleton(image)\n\n    # Step 2: Detect ripple patterns\n    ripples = detect_ripples(skeleton)\n\n    # Step 3: Process with custom parameters\n    result = process_lithic_drawing(\n        image_path,\n        save_debug=True,\n        output_dpi=metadata.get('dpi', [300, 300])[0]\n    )\n\n    return result\n</code></pre>"},{"location":"api-reference/python-api/#batch-processing-with-progress","title":"Batch Processing with Progress","text":"<pre><code>from pathlib import Path\nfrom lithic_editor.processing import process_lithic_drawing\nfrom tqdm import tqdm  # Optional: for progress bar\n\ndef batch_process(input_dir, output_dir):\n    \"\"\"Process all images in a directory.\"\"\"\n\n    input_path = Path(input_dir)\n    output_path = Path(output_dir)\n    output_path.mkdir(exist_ok=True)\n\n    # Get all image files\n    image_files = list(input_path.glob(\"*.png\"))\n    image_files.extend(input_path.glob(\"*.jpg\"))\n\n    results = []\n    for image_file in tqdm(image_files, desc=\"Processing\"):\n        try:\n            result = process_lithic_drawing(\n                str(image_file),\n                output_folder=str(output_path / image_file.stem)\n            )\n            results.append({\n                'file': image_file.name,\n                'success': result['success'],\n                'time': result['processing_time']\n            })\n        except Exception as e:\n            results.append({\n                'file': image_file.name,\n                'success': False,\n                'error': str(e)\n            })\n\n    return results\n\n# Usage\nresults = batch_process(\"drawings/\", \"processed/\")\nprint(f\"Processed {sum(r['success'] for r in results)}/{len(results)} images\")\n</code></pre>"},{"location":"api-reference/python-api/#integration-with-numpypil","title":"Integration with NumPy/PIL","text":"<pre><code>import numpy as np\nfrom PIL import Image\nfrom lithic_editor.processing import process_lithic_drawing\n\ndef process_from_array(image_array: np.ndarray) -&gt; np.ndarray:\n    \"\"\"Process a NumPy array.\"\"\"\n\n    # Save array as temporary image\n    temp_path = \"temp_image.png\"\n    Image.fromarray(image_array).save(temp_path)\n\n    # Process\n    result = process_lithic_drawing(temp_path)\n\n    # Load result as array\n    if result['success']:\n        processed = np.array(Image.open(result['output_path']))\n        return processed\n    return image_array\n\n# Example with PIL\npil_image = Image.open(\"drawing.png\")\narray = np.array(pil_image)\nprocessed_array = process_from_array(array)\nresult_image = Image.fromarray(processed_array)\n</code></pre>"},{"location":"api-reference/python-api/#error-handling","title":"Error Handling","text":""},{"location":"api-reference/python-api/#common-exceptions","title":"Common Exceptions","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing\n\ntry:\n    result = process_lithic_drawing(\"image.png\")\nexcept FileNotFoundError:\n    print(\"Image file not found\")\nexcept ValueError as e:\n    print(f\"Invalid parameter: {e}\")\nexcept PermissionError:\n    print(\"Cannot write to output directory\")\nexcept Exception as e:\n    print(f\"Unexpected error: {e}\")\n</code></pre>"},{"location":"api-reference/python-api/#validation","title":"Validation","text":"<pre><code>from pathlib import Path\n\ndef validate_and_process(image_path):\n    \"\"\"Validate before processing.\"\"\"\n\n    path = Path(image_path)\n\n    # Check file exists\n    if not path.exists():\n        raise FileNotFoundError(f\"File not found: {image_path}\")\n\n    # Check file type\n    valid_extensions = {'.png', '.jpg', '.jpeg', '.tiff', '.tif'}\n    if path.suffix.lower() not in valid_extensions:\n        raise ValueError(f\"Unsupported format: {path.suffix}\")\n\n    # Check file size\n    size_mb = path.stat().st_size / (1024 * 1024)\n    if size_mb &gt; 100:\n        raise ValueError(f\"File too large: {size_mb:.1f}MB\")\n\n    # Process\n    return process_lithic_drawing(str(path))\n</code></pre>"},{"location":"api-reference/python-api/#performance-tips","title":"Performance Tips","text":"<ol> <li>Memory Management: For large images, process in batches</li> <li>Parallel Processing: Use multiprocessing for batch operations</li> <li>Cache Results: Store processed images to avoid reprocessing</li> <li>Optimize Input: Resize very large images before processing</li> </ol> <pre><code>from concurrent.futures import ProcessPoolExecutor\nfrom pathlib import Path\n\ndef parallel_batch_process(image_files, max_workers=4):\n    \"\"\"Process multiple images in parallel.\"\"\"\n\n    with ProcessPoolExecutor(max_workers=max_workers) as executor:\n        futures = []\n        for image_file in image_files:\n            future = executor.submit(process_lithic_drawing, str(image_file))\n            futures.append((image_file, future))\n\n        results = []\n        for image_file, future in futures:\n            try:\n                result = future.result(timeout=60)\n                results.append((image_file, result))\n            except Exception as e:\n                print(f\"Failed to process {image_file}: {e}\")\n\n    return results\n</code></pre>"},{"location":"developer/contributing/","title":"Contributing to Lithic Editor","text":"<p>Thank you for your interest in contributing to the Lithic Editor and Annotator! This guide will help you get started.</p>"},{"location":"developer/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher</li> <li>Git</li> <li>Basic familiarity with PyQt5 and image processing concepts</li> </ul>"},{"location":"developer/contributing/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/YourUsername/lithic-editor.git\ncd lithic-editor\n</code></pre></p> </li> <li> <p>Create a virtual environment (recommended): <pre><code>python -m venv lithic-env\nsource lithic-env/bin/activate  # Linux/macOS\n# or\nlithic-env\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Install in development mode: <pre><code># Install with test dependencies\npip install -e \".[test]\"\n\n# Or install with all development tools\npip install -e \".[dev]\"\n\n# Or install everything (dev + docs + test)\npip install -e \".[dev,docs,test]\"\n</code></pre></p> </li> </ol>"},{"location":"developer/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer/contributing/#running-tests","title":"Running Tests","text":"<p>Always run tests before submitting changes:</p> <pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=lithic_editor --cov-report=html\n\n# Run specific test file\npytest tests/test_processing.py\n\n# Run specific test\npytest tests/test_processing.py::TestProcessingModule::test_process_image_from_file\n\n# View coverage report\nopen htmlcov/index.html  # macOS\nxdg-open htmlcov/index.html  # Linux\nstart htmlcov/index.html  # Windows\n</code></pre>"},{"location":"developer/contributing/#code-quality","title":"Code Quality","text":"<p>We use several tools to maintain code quality:</p> <pre><code># Format code\nblack lithic_editor tests\n\n# Check style\nflake8 lithic_editor tests\n\n# Type checking (optional)\nmypy lithic_editor\n</code></pre>"},{"location":"developer/contributing/#running-the-application","title":"Running the Application","text":"<p>Test your changes:</p> <pre><code># GUI mode\nlithic-editor --gui\n\n# CLI mode\nlithic-editor process example.png --debug\n\n# Help system\nlithic-editor docs --offline\n</code></pre>"},{"location":"developer/contributing/#project-structure","title":"Project Structure","text":"<pre><code>lithic_editor/\n\u251c\u2500\u2500 annotations/         # Arrow annotation system\n\u2502   \u251c\u2500\u2500 arrows.py       # Arrow classes and canvas\n\u2502   \u2514\u2500\u2500 integration.py  # GUI integration helpers\n\u251c\u2500\u2500 cli/                # Command-line interface\n\u2502   \u251c\u2500\u2500 main.py        # Main CLI entry point\n\u2502   \u251c\u2500\u2500 help.py        # Help system\n\u2502   \u2514\u2500\u2500 docs_server.py # Documentation server\n\u251c\u2500\u2500 gui/                # Graphical user interface\n\u2502   \u2514\u2500\u2500 main_window.py # Main application window\n\u2514\u2500\u2500 processing/         # Image processing algorithms\n    \u2514\u2500\u2500 ripple_removal.py # Core processing engine\n\ntests/                  # Test suite\n\u251c\u2500\u2500 conftest.py        # Test configuration\n\u251c\u2500\u2500 test_processing.py # Processing tests\n\u251c\u2500\u2500 test_annotations.py # Annotation tests\n\u251c\u2500\u2500 test_cli.py        # CLI tests\n\u2514\u2500\u2500 test_gui.py        # GUI tests\n\ndocs/                   # Documentation source\n\u251c\u2500\u2500 index.md           # Homepage\n\u251c\u2500\u2500 user-guide/        # User documentation\n\u251c\u2500\u2500 developer/         # Developer documentation\n\u2514\u2500\u2500 getting-started/   # Installation guides\n</code></pre>"},{"location":"developer/contributing/#writing-tests","title":"Writing Tests","text":""},{"location":"developer/contributing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test individual functions/classes</li> <li>Integration Tests: Test component interactions</li> <li>GUI Tests: Test user interface components</li> <li>CLI Tests: Test command-line interface</li> </ol>"},{"location":"developer/contributing/#test-guidelines","title":"Test Guidelines","text":"<ul> <li>Write tests for new features</li> <li>Maintain test coverage above 80%</li> <li>Use descriptive test names</li> <li>Use fixtures for common setup</li> <li>Mock external dependencies</li> </ul>"},{"location":"developer/contributing/#example-test","title":"Example Test","text":"<pre><code>def test_process_image_with_debug(sample_image, temp_dir):\n    \"\"\"Test processing with debug output enabled.\"\"\"\n    result = process_lithic_drawing(\n        image_path=str(sample_image),\n        output_folder=str(temp_dir),\n        save_debug=True\n    )\n\n    assert result is not None\n    debug_files = list(temp_dir.glob(\"*.png\"))\n    assert len(debug_files) &gt; 0\n</code></pre>"},{"location":"developer/contributing/#documentation","title":"Documentation","text":""},{"location":"developer/contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install documentation dependencies\npip install -e \".[docs]\"\n\n# Serve documentation locally\nmkdocs serve\n\n# Build static documentation\nmkdocs build\n\n# Deploy to GitHub Pages (maintainers only)\nmkdocs gh-deploy\n</code></pre>"},{"location":"developer/contributing/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Add screenshots for UI features</li> <li>Follow the existing structure</li> </ul>"},{"location":"developer/contributing/#submission-guidelines","title":"Submission Guidelines","text":""},{"location":"developer/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the coding standards</p> </li> <li> <p>Write tests for new functionality</p> </li> <li> <p>Update documentation if needed</p> </li> <li> <p>Run the full test suite: <pre><code>pytest\n</code></pre></p> </li> <li> <p>Check code quality: <pre><code>black lithic_editor tests\nflake8 lithic_editor tests\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"Add feature: your feature description\"\n</code></pre></p> </li> <li> <p>Push and create pull request: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"developer/contributing/#pull-request-requirements","title":"Pull Request Requirements","text":"<ul> <li> All tests pass</li> <li> Code coverage maintained or improved</li> <li> Documentation updated (if applicable)</li> <li> Code follows style guidelines</li> <li> Descriptive commit messages</li> <li> Pull request description explains changes</li> </ul>"},{"location":"developer/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Email: jg760@cam.ac.uk</li> </ul>"},{"location":"developer/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p>"},{"location":"developer/contributing/#areas-for-contribution","title":"Areas for Contribution","text":"<ul> <li>Algorithm improvements: Enhance ripple detection accuracy</li> <li>GUI enhancements: Improve user experience</li> <li>Documentation: Add examples and tutorials</li> <li>Testing: Increase test coverage</li> <li>Performance: Optimize processing speed</li> <li>Platform support: Improve cross-platform compatibility</li> </ul> <p>Thank you for contributing! \ud83c\udfdb\ufe0f</p>"},{"location":"developer/testing/","title":"Testing Guide","text":""},{"location":"developer/testing/#overview","title":"Overview","text":"<p>Lithic Editor uses a comprehensive test suite to ensure reliability and maintain code quality. This guide covers how to run, write, and understand the tests.</p>"},{"location":"developer/testing/#quick-start","title":"Quick Start","text":""},{"location":"developer/testing/#installation","title":"Installation","text":"<pre><code># Install with test dependencies\npip install -e \".[test]\"\n\n# Or install all development dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"developer/testing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with verbose output\npytest -v\n\n# Run specific test file\npytest tests/test_processing.py\n\n# Run with coverage\npytest --cov=lithic_editor --cov-report=html\n</code></pre>"},{"location":"developer/testing/#test-structure","title":"Test Structure","text":""},{"location":"developer/testing/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py           # Shared fixtures and configuration\n\u251c\u2500\u2500 test_processing.py    # Image processing tests\n\u251c\u2500\u2500 test_annotations.py   # Arrow annotation tests  \n\u251c\u2500\u2500 test_cli.py          # Command-line interface tests\n\u251c\u2500\u2500 test_gui.py          # GUI component tests\n\u2514\u2500\u2500 README.md            # Test documentation\n</code></pre>"},{"location":"developer/testing/#test-categories","title":"Test Categories","text":""},{"location":"developer/testing/#1-processing-tests-test_processingpy","title":"1. Processing Tests (<code>test_processing.py</code>)","text":"<p>Tests the core image processing algorithms:</p> <ul> <li>Image loading from files and numpy arrays</li> <li>Ripple removal algorithm correctness</li> <li>Debug output generation</li> <li>DPI preservation and handling</li> <li>Multiple image format support</li> <li>Error handling and edge cases</li> </ul> <p>Example: <pre><code>def test_process_image_from_file(sample_image, temp_dir):\n    \"\"\"Test processing an image from file path.\"\"\"\n    result = process_lithic_drawing(\n        image_path=str(sample_image),\n        output_folder=str(temp_dir),\n        save_debug=False\n    )\n\n    assert result is not None\n    assert isinstance(result, np.ndarray)\n    assert result.shape == (100, 100)\n</code></pre></p>"},{"location":"developer/testing/#2-annotation-tests-test_annotationspy","title":"2. Annotation Tests (<code>test_annotations.py</code>)","text":"<p>Tests the arrow annotation system:</p> <ul> <li>Arrow creation and customization</li> <li>Detection status calculations  </li> <li>Canvas widget functionality</li> <li>Coordinate mapping between view and image</li> <li>DPI-aware arrow sizing</li> </ul> <p>Example: <pre><code>def test_arrow_detection_status():\n    \"\"\"Test arrow detection status calculation.\"\"\"\n    small_arrow = Arrow(size=10)\n    assert small_arrow.get_detection_status() == \"error\"\n\n    large_arrow = Arrow(size=100)\n    assert large_arrow.get_detection_status() == \"good\"\n</code></pre></p>"},{"location":"developer/testing/#3-cli-tests-test_clipy","title":"3. CLI Tests (<code>test_cli.py</code>)","text":"<p>Tests the command-line interface:</p> <ul> <li>Argument parsing for all commands</li> <li>File validation and error handling</li> <li>Help system functionality</li> <li>Documentation commands</li> <li>Process workflow integration</li> </ul> <p>Example: <pre><code>def test_process_command():\n    \"\"\"Test process command parsing.\"\"\"\n    parser = create_parser()\n    args = parser.parse_args(['process', 'image.png', '--debug'])\n\n    assert args.command == 'process'\n    assert args.input_image == 'image.png'\n    assert args.debug == True\n</code></pre></p>"},{"location":"developer/testing/#4-gui-tests-test_guipy","title":"4. GUI Tests (<code>test_gui.py</code>)","text":"<p>Tests the graphical interface:</p> <ul> <li>Window creation and initialization</li> <li>Widget existence and configuration</li> <li>Button states and interactions</li> <li>Processing thread functionality</li> <li>Canvas operations</li> </ul> <p>Example: <pre><code>def test_gui_creation(qapp):\n    \"\"\"Test creating main GUI window.\"\"\"\n    window = LithicProcessorGUI()\n    assert window is not None\n    assert window.windowTitle() == \"Lithic Editor and Annotator\"\n</code></pre></p>"},{"location":"developer/testing/#test-fixtures","title":"Test Fixtures","text":""},{"location":"developer/testing/#available-fixtures","title":"Available Fixtures","text":"<p>Defined in <code>conftest.py</code>:</p>"},{"location":"developer/testing/#qapp","title":"<code>qapp</code>","text":"<p>PyQt5 QApplication instance for GUI tests.</p>"},{"location":"developer/testing/#temp_dir","title":"<code>temp_dir</code>","text":"<p>Temporary directory that's automatically cleaned up.</p>"},{"location":"developer/testing/#sample_image","title":"<code>sample_image</code>","text":"<p>100x100 pixel test image with horizontal lines and a vertical line.</p>"},{"location":"developer/testing/#sample_image_with_dpi","title":"<code>sample_image_with_dpi</code>","text":"<p>300x300 pixel test image with DPI metadata.</p>"},{"location":"developer/testing/#sample_numpy_array","title":"<code>sample_numpy_array</code>","text":"<p>NumPy array representing a test image.</p>"},{"location":"developer/testing/#sample_pixmap","title":"<code>sample_pixmap</code>","text":"<p>QPixmap for GUI testing.</p>"},{"location":"developer/testing/#using-fixtures","title":"Using Fixtures","text":"<pre><code>def test_with_fixtures(sample_image, temp_dir):\n    \"\"\"Example test using fixtures.\"\"\"\n    # sample_image is automatically created\n    # temp_dir is automatically created and cleaned up\n\n    result = process_image(str(sample_image))\n\n    output_file = temp_dir / \"result.png\"\n    save_image(result, output_file)\n\n    assert output_file.exists()\n</code></pre>"},{"location":"developer/testing/#writing-new-tests","title":"Writing New Tests","text":""},{"location":"developer/testing/#test-naming","title":"Test Naming","text":"<ul> <li>File names: <code>test_*.py</code></li> <li>Class names: <code>TestClassName</code></li> <li>Function names: <code>test_function_name</code></li> <li>Use descriptive names that explain what's being tested</li> </ul>"},{"location":"developer/testing/#test-structure_1","title":"Test Structure","text":"<pre><code>class TestFeature:\n    \"\"\"Test suite for Feature.\"\"\"\n\n    def test_basic_functionality(self):\n        \"\"\"Test basic feature works.\"\"\"\n        # Arrange\n        feature = Feature()\n\n        # Act\n        result = feature.do_something()\n\n        # Assert\n        assert result is not None\n\n    def test_edge_case(self):\n        \"\"\"Test feature handles edge case.\"\"\"\n        # Test implementation\n        pass\n\n    def test_error_handling(self):\n        \"\"\"Test feature handles errors gracefully.\"\"\"\n        with pytest.raises(ValueError):\n            Feature().invalid_operation()\n</code></pre>"},{"location":"developer/testing/#best-practices","title":"Best Practices","text":"<ol> <li>One concept per test: Each test should focus on one specific behavior</li> <li>Descriptive names: Test names should clearly indicate what they test</li> <li>Use fixtures: Reuse common setup through fixtures</li> <li>Mock external dependencies: Use <code>unittest.mock</code> for external services</li> <li>Test both success and failure: Include error cases and edge conditions</li> <li>Keep tests fast: Avoid unnecessary file I/O or network calls</li> </ol>"},{"location":"developer/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"developer/testing/#github-actions","title":"GitHub Actions","text":"<p>Tests run automatically on:</p> <ul> <li>Every push to main branch</li> <li>Every pull request</li> <li>Multiple platforms: Windows, macOS, Linux</li> <li>Multiple Python versions: 3.7-3.11</li> </ul>"},{"location":"developer/testing/#configuration","title":"Configuration","text":"<p>See <code>.github/workflows/tests.yml</code> for the complete CI configuration.</p>"},{"location":"developer/testing/#special-considerations","title":"Special Considerations","text":"<p>Linux CI (headless): <pre><code>export QT_QPA_PLATFORM=offscreen\nxvfb-run -a pytest\n</code></pre></p> <p>Cross-platform testing: - Uses virtual display on Linux - Handles platform-specific PyQt5 differences - Tests file path handling across platforms</p>"},{"location":"developer/testing/#coverage-goals","title":"Coverage Goals","text":""},{"location":"developer/testing/#current-coverage","title":"Current Coverage","text":"<p>Run with coverage to see current status: <pre><code>pytest --cov=lithic_editor --cov-report=html\nopen htmlcov/index.html\n</code></pre></p>"},{"location":"developer/testing/#target-coverage","title":"Target Coverage","text":"<ul> <li>Overall: 80%+</li> <li>Processing module: 90%+</li> <li>CLI module: 85%+</li> <li>GUI module: 70%+ (some interactions hard to test)</li> </ul>"},{"location":"developer/testing/#improving-coverage","title":"Improving Coverage","text":"<p>Focus areas for improvement: - Error handling paths - Edge cases in image processing - GUI interaction flows - File I/O error conditions</p>"},{"location":"developer/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"developer/testing/#running-specific-tests","title":"Running Specific Tests","text":"<pre><code># Run one test\npytest tests/test_processing.py::TestProcessingModule::test_specific_case -v\n\n# Run tests matching pattern\npytest -k \"test_arrow\" -v\n\n# Stop on first failure\npytest -x\n\n# Show local variables on failure\npytest --tb=long\n</code></pre>"},{"location":"developer/testing/#test-debugging","title":"Test Debugging","text":"<pre><code>def test_debug_example():\n    \"\"\"Example test with debugging.\"\"\"\n    import pdb; pdb.set_trace()  # Debugger breakpoint\n\n    result = function_to_test()\n\n    # Or use print statements\n    print(f\"Result: {result}\")\n\n    assert result == expected\n</code></pre>"},{"location":"developer/testing/#common-issues","title":"Common Issues","text":"<p>PyQt5 issues: - Ensure QApplication exists (use <code>qapp</code> fixture) - Set <code>QT_QPA_PLATFORM=offscreen</code> for headless testing</p> <p>File permissions: - Use <code>temp_dir</code> fixture for file operations - Clean up resources in teardown</p> <p>Import errors: - Install package in development mode: <code>pip install -e .</code> - Check Python path includes project directory</p>"},{"location":"developer/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"developer/testing/#benchmarking","title":"Benchmarking","text":"<pre><code>import time\n\ndef test_processing_performance(sample_image):\n    \"\"\"Test processing performance.\"\"\"\n    start_time = time.time()\n\n    result = process_lithic_drawing(str(sample_image))\n\n    end_time = time.time()\n    processing_time = end_time - start_time\n\n    # Should process in reasonable time\n    assert processing_time &lt; 30.0  # 30 seconds max\n    assert result is not None\n</code></pre>"},{"location":"developer/testing/#memory-testing","title":"Memory Testing","text":"<pre><code>import psutil\nimport os\n\ndef test_memory_usage(large_sample_image):\n    \"\"\"Test memory usage stays reasonable.\"\"\"\n    process = psutil.Process(os.getpid())\n    initial_memory = process.memory_info().rss\n\n    result = process_lithic_drawing(str(large_sample_image))\n\n    final_memory = process.memory_info().rss\n    memory_increase = final_memory - initial_memory\n\n    # Should not use excessive memory (100MB max increase)\n    assert memory_increase &lt; 100 * 1024 * 1024\n</code></pre>"},{"location":"developer/testing/#contributing-tests","title":"Contributing Tests","text":""},{"location":"developer/testing/#before-submitting","title":"Before Submitting","text":"<ol> <li>Run full test suite: <code>pytest</code></li> <li>Check coverage: <code>pytest --cov=lithic_editor</code></li> <li>Verify style: <code>black tests/</code> and <code>flake8 tests/</code></li> <li>Test on your platform: Ensure tests pass locally</li> </ol>"},{"location":"developer/testing/#pull-request-requirements","title":"Pull Request Requirements","text":"<ul> <li>All existing tests must pass</li> <li>New features must include tests</li> <li>Test coverage should not decrease</li> <li>Follow existing test patterns and naming conventions</li> </ul>"},{"location":"developer/testing/#getting-help","title":"Getting Help","text":"<ul> <li>Test Issues: GitHub Issues</li> <li>Test Discussions: GitHub Discussions</li> <li>Documentation: This guide and test docstrings</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.7 or higher</li> <li>RAM: 4GB minimum (8GB recommended)</li> <li>Storage: 500MB free space</li> </ul>"},{"location":"getting-started/installation/#operating-systems","title":"Operating Systems","text":"<ul> <li>Windows 10/11</li> <li>macOS &gt;= 10.15</li> <li>Linux (Ubuntu 20.04+, Fedora 34+, etc.)</li> </ul>"},{"location":"getting-started/installation/#step-1-prerequisites","title":"Step 1: Prerequisites","text":"<p>Before installing Lithic Editor, ensure you have:</p> <ul> <li>Python 3.7+ installed on your system (Download Python)</li> <li>Git installed for GitHub access (Download Git)</li> <li>pip package manager (included with Python 3.4+)</li> </ul> <p>Verify your setup: <pre><code>python --version    # Should show 3.7 or higher\ngit --version       # Should show git version\npip --version       # Should show pip version\n</code></pre></p>"},{"location":"getting-started/installation/#step-2-virtual-environment-setup-recommended","title":"Step 2: Virtual Environment Setup (Recommended)","text":"<p>Create an isolated environment for Lithic Editor:</p> venvconda <pre><code># Create virtual environment\npython -m venv lithic-env\n\n# Activate it\n# Windows\nlithic-env\\Scripts\\activate\n# macOS/Linux\nsource lithic-env/bin/activate\n</code></pre> <pre><code># Create conda environment\nconda create -n lithic python=3.9\nconda activate lithic\n</code></pre>"},{"location":"getting-started/installation/#step-3-installation","title":"Step 3: Installation","text":"<p>Choose your installation method:</p>"},{"location":"getting-started/installation/#method-1-install-from-github-most-users","title":"Method 1: Install from GitHub (Most Users)","text":"<p>With your virtual environment activated:</p> <pre><code># Install directly from GitHub\npip install git+https://github.com/JasonGellis/lithic-editor.git\n</code></pre> <p>To install a specific version: <pre><code># Install a specific release\npip install git+https://github.com/JasonGellis/lithic-editor.git@v1.0.0\n</code></pre></p>"},{"location":"getting-started/installation/#method-2-development-installation-contributors","title":"Method 2: Development Installation (Contributors)","text":"<p>For developers, contributors, or users who want to modify the code:</p> <pre><code># Clone the repository\ngit clone https://github.com/JasonGellis/lithic-editor.git\ncd lithic-editor\n\n# Basic development install (editable mode)\npip install -e .\n\n# Install with test dependencies (recommended for developers)\npip install -e \".[test]\"\n\n# Install with all development tools\npip install -e \".[dev]\"\n\n# Install with documentation tools\npip install -e \".[docs]\"\n\n# Install everything (dev + test + docs)\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"getting-started/installation/#step-4-verify-installation","title":"Step 4: Verify Installation","text":"<p>Test that everything is working:</p> <pre><code># Check version\nlithic-editor --version\n\n# Run help command\nlithic-editor --help\n\n# Launch GUI (opens a window)\nlithic-editor --gui\n</code></pre>"},{"location":"getting-started/installation/#dependency-information","title":"Dependency Information","text":""},{"location":"getting-started/installation/#core-dependencies","title":"Core Dependencies","text":"<p>All dependencies are automatically installed:</p> Package Purpose numpy Numerical operations opencv-python Image processing Pillow Image I/O PyQt5 GUI framework scikit-image Advanced image processing networkx Graph algorithms scipy Scientific computing"},{"location":"getting-started/installation/#development-dependencies","title":"Development Dependencies","text":"Group Purpose Includes <code>test</code> Running tests pytest, pytest-qt, pytest-cov <code>dev</code> Code quality black, flake8, mypy + test dependencies <code>docs</code> Building docs mkdocs, mkdocs-material + extensions <p>All dependencies are automatically installed with the package. However, if you encounter issues, you can manually install them:</p> <pre><code># Core dependencies\npip install numpy opencv-python Pillow PyQt5 scikit-image networkx scipy\n\n# Optional: For building/editing documentation (NOT needed for viewing docs)\n# Users can view docs with 'lithic-editor docs' without these packages\npip install mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"ImportError: No module named 'PyQt5' <p>Solution: Install PyQt5 manually <pre><code>pip install PyQt5==5.15.9\n</code></pre></p> OpenCV import error <p>Solution: Reinstall OpenCV <pre><code>pip uninstall opencv-python opencv-python-headless\npip install opencv-python\n</code></pre></p> GUI doesn't launch on Linux <p>Solution: Install system dependencies <pre><code># Ubuntu/Debian\nsudo apt-get install python3-pyqt5 libxcb-xinerama0\n\n# Fedora\nsudo dnf install python3-qt5\n</code></pre></p> Permission denied error <p>Solution: Install in user space <pre><code>pip install --user git+https://github.com/JasonGellis/lithic-editor.git\n</code></pre></p>"},{"location":"getting-started/installation/#platform-specific-setup","title":"Platform-Specific Setup","text":"WindowsmacOSLinux <p>You might need Visual C++ redistributables: - Download from Microsoft</p> <p>You might need to allow the application in Security &amp; Privacy settings the first time you run it.</p> <p>Some distributions require additional packages: <pre><code># Ubuntu/Debian\nsudo apt-get install python3-dev python3-pip python3-venv\n\n# Fedora\nsudo dnf install python3-devel\n\n# Arch\nsudo pacman -S python python-pip\n</code></pre></p>"},{"location":"getting-started/installation/#updating","title":"Updating","text":"<p>To update to the latest version:</p> <pre><code># Update from GitHub\npip install --upgrade git+https://github.com/JasonGellis/lithic-editor.git\n\n# For development installation\ncd lithic-editor\ngit pull\npip install -e . --upgrade\n</code></pre>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>To remove Lithic Editor:</p> <pre><code>pip uninstall lithic-editor\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, proceed to the User Guide to begin processing lithic drawings.</p>"},{"location":"getting-started/requirements/","title":"Requirements","text":""},{"location":"getting-started/requirements/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/requirements/#minimum-specifications","title":"Minimum Specifications","text":"<ul> <li>Processor: Dual-core CPU (2.0 GHz or faster)</li> <li>Memory: 4 GB RAM</li> <li>Storage: 500 MB available space</li> <li>Display: 1280\u00d7720 resolution</li> <li>Graphics: OpenGL 2.0 support</li> </ul>"},{"location":"getting-started/requirements/#recommended-specifications","title":"Recommended Specifications","text":"<ul> <li>Processor: Quad-core CPU (3.0 GHz or faster)</li> <li>Memory: 8 GB RAM or more</li> <li>Storage: 2 GB available space</li> <li>Display: 1920\u00d71080 resolution or higher</li> <li>Graphics: Dedicated graphics card</li> </ul>"},{"location":"getting-started/requirements/#software-requirements","title":"Software Requirements","text":""},{"location":"getting-started/requirements/#python-version","title":"Python Version","text":"<ul> <li>Minimum: Python 3.7</li> <li>Recommended: Python 3.9 or later</li> <li>Maximum tested: Python 3.11</li> </ul>"},{"location":"getting-started/requirements/#operating-systems","title":"Operating Systems","text":"WindowsmacOSLinux <ul> <li>Windows 10 (64-bit) or later</li> <li>Windows 11 fully supported</li> <li>Requires Visual C++ Redistributable</li> </ul> <ul> <li>macOS 10.15 Catalina or later</li> <li>Apple Silicon (M1/M2) supported</li> <li>Intel Macs supported</li> </ul> <ul> <li>Ubuntu 20.04 LTS or later</li> <li>Fedora 34 or later</li> <li>Debian 11 or later</li> <li>Other distributions with Qt5 support</li> </ul>"},{"location":"getting-started/requirements/#python-dependencies","title":"Python Dependencies","text":"<p>All dependencies are automatically installed with the package:</p> Package Version Purpose numpy \u22651.20.0 Numerical operations opencv-contrib-python \u22654.5.0 Image processing and neural network upscaling Pillow \u22658.0.0 Image I/O PyQt5 \u22655.15.0 GUI framework scikit-image \u22650.18.0 Advanced image processing networkx \u22652.5 Graph algorithms scipy \u22651.7.0 Scientific computing"},{"location":"getting-started/requirements/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/requirements/#for-development","title":"For Development","text":"<ul> <li>pytest (\u22656.0) - Testing framework</li> <li>black (\u226521.0) - Code formatting</li> <li>flake8 (\u22653.8) - Code linting</li> <li>mypy (\u22650.800) - Type checking</li> </ul>"},{"location":"getting-started/requirements/#for-documentation","title":"For Documentation","text":"<ul> <li>mkdocs (\u22651.5.0) - Documentation generator</li> <li>mkdocs-material (\u22659.0.0) - Material theme</li> <li>pymdown-extensions (\u226510.0) - Markdown extensions</li> </ul>"},{"location":"getting-started/requirements/#image-format-support","title":"Image Format Support","text":""},{"location":"getting-started/requirements/#input-formats","title":"Input Formats","text":"<ul> <li>PNG - Recommended, lossless</li> <li>JPEG/JPG - Widely supported</li> <li>TIFF/TIF - Professional quality</li> <li>BMP - Uncompressed</li> </ul>"},{"location":"getting-started/requirements/#output-formats","title":"Output Formats","text":"<ul> <li>PNG - Best for web and presentations</li> <li>JPEG - Best for publications</li> <li>TIFF - Best for archival</li> </ul>"},{"location":"getting-started/requirements/#performance-considerations","title":"Performance Considerations","text":""},{"location":"getting-started/requirements/#image-size-recommendations","title":"Image Size Recommendations","text":"<ul> <li>Optimal: 2000-3000 pixels maximum dimension</li> <li>Maximum: 8000 pixels (may be slow)</li> <li>DPI: 300 DPI for best quality</li> </ul>"},{"location":"getting-started/requirements/#memory-usage","title":"Memory Usage","text":"<p>Memory usage depends on image size: - 2000\u00d72000 image: ~50 MB - 4000\u00d74000 image: ~200 MB - 8000\u00d78000 image: ~800 MB</p>"},{"location":"getting-started/requirements/#network-requirements","title":"Network Requirements","text":"<ul> <li>No internet connection required for core functionality</li> <li>Internet needed only for:</li> <li>Installation from GitHub</li> <li>Downloading updates</li> <li>Accessing online documentation</li> </ul>"},{"location":"getting-started/requirements/#compatibility-notes","title":"Compatibility Notes","text":""},{"location":"getting-started/requirements/#known-compatible-ides","title":"Known Compatible IDEs","text":"<ul> <li>Visual Studio Code</li> <li>PyCharm</li> <li>Jupyter Notebook/Lab</li> <li>Spyder</li> <li>Sublime Text</li> </ul>"},{"location":"getting-started/requirements/#virtual-environments","title":"Virtual Environments","text":"<p>Compatible with: - venv - virtualenv - conda/miniconda - poetry - pipenv</p>"},{"location":"getting-started/requirements/#checking-your-system","title":"Checking Your System","text":"<p>To verify your system meets the requirements:</p> <pre><code>import sys\nimport platform\n\nprint(f\"Python version: {sys.version}\")\nprint(f\"Platform: {platform.platform()}\")\nprint(f\"Architecture: {platform.machine()}\")\nprint(f\"Processor: {platform.processor()}\")\n\n# Check for required packages\nrequired = ['numpy', 'cv2', 'PIL', 'PyQt5', 'skimage', 'networkx', 'scipy']\nfor package in required:\n    try:\n        __import__(package)\n        print(f\"\u2713 {package} installed\")\n    except ImportError:\n        print(f\"\u2717 {package} missing\")\n</code></pre>"},{"location":"getting-started/requirements/#troubleshooting-requirements","title":"Troubleshooting Requirements","text":"<p>If you encounter issues:</p> <ol> <li>Update pip: <code>pip install --upgrade pip</code></li> <li>Update setuptools: <code>pip install --upgrade setuptools wheel</code></li> <li>Check Python version: <code>python --version</code></li> <li>Verify 64-bit Python: <code>python -c \"import sys; print(sys.maxsize &gt; 2**32)\"</code></li> </ol> <p>For platform-specific issues, see the Installation Guide.</p>"},{"location":"user-guide/CLI/","title":"CLI","text":""},{"location":"user-guide/CLI/#command-line-processing","title":"Command Line Processing","text":""},{"location":"user-guide/CLI/#basic-usage","title":"Basic Usage","text":"<pre><code># Process single image\nlithic-editor process input.png\n\n# Specify output directory\nlithic-editor process input.png --output results/\n\n# Enable debug mode\nlithic-editor process input.png --debug\n</code></pre>"},{"location":"user-guide/CLI/#batch-processing","title":"Batch Processing","text":"<pre><code># Process all PNG files\nfor file in *.png; do\n    lithic-editor process \"$file\" --output processed/\ndone\n\n# Process with parallel jobs\nfind . -name \"*.png\" | parallel lithic-editor process {} --quiet\n</code></pre>"},{"location":"user-guide/CLI/#advanced-options","title":"Advanced Options","text":"<pre><code># Neural network upscaling with debug output\nlithic-editor process low_res.png \\\n    --auto-upscale \\\n    --default-dpi 150 \\\n    --upscale-model fsrcnn \\\n    --upscale-threshold 300 \\\n    --debug\n\n# Batch processing with upscaling\nfor file in *.png; do\n    lithic-editor process \"$file\" \\\n        --auto-upscale \\\n        --default-dpi 200 \\\n        --output \"processed/${file%.png}/\"\ndone\n</code></pre>"},{"location":"user-guide/images/","title":"Lithic Illustrations - Image Types and Quality","text":""},{"location":"user-guide/images/#introduction","title":"Introduction","text":"<p>This section covers image types, formats, and quality requirements for optimal processing with Lithic Editor and Annotator. Understanding these requirements will ensure the best results when removing ripple lines from your lithic drawings.</p>"},{"location":"user-guide/images/#supported-image-formats","title":"Supported Image Formats","text":""},{"location":"user-guide/images/#recommended-formats","title":"Recommended Formats","text":"<ul> <li>PNG: Lossless compression with transparency support. Best for line drawings and technical illustrations</li> <li>TIFF/TIF: Professional quality, uncompressed format ideal for archival purposes</li> <li>JPEG/JPG: Widely compatible with smaller file sizes, but may introduce compression artifacts</li> <li>BMP: Simple uncompressed format, larger file sizes</li> </ul>"},{"location":"user-guide/images/#image-quality-requirements","title":"Image Quality Requirements","text":"<p>     Example of a high-quality lithic flake illustration at 300 DPI showing ripple lines, cortex stippling, and clear structural boundaries suitable for processing   </p> <p>For optimal processing results, your images should have:</p> <ul> <li>High contrast: Black lines on white background work best</li> <li>Resolution: Minimum 300 DPI (dots per inch) recommended</li> <li>Clean lines: Continuous, unbroken strokes for structural elements</li> <li>Visible ripples: Ripple lines should extend from one edge of the scar but not meet the opposite edge</li> <li>Minimal noise: Free from scanning artifacts or background texture</li> </ul>"},{"location":"user-guide/images/#resolution-and-dpi","title":"Resolution and DPI","text":""},{"location":"user-guide/images/#automatic-dpi-detection","title":"Automatic DPI Detection","text":"<p>Lithic Editor automatically:</p> <ul> <li>Reads DPI metadata from image files</li> <li>Prompts for manual DPI input when metadata is missing</li> <li>Offers neural network upscaling for images below 300 DPI</li> </ul>"},{"location":"user-guide/images/#dpi-requirements","title":"DPI Requirements","text":"<ul> <li>Optimal: 300 DPI or higher</li> <li>Minimum: 150 DPI (will trigger automatic upscaling)</li> <li>Maximum tested: 600 DPI</li> </ul>"},{"location":"user-guide/images/#low-resolution-image-enhancement","title":"Low-Resolution Image Enhancement","text":""},{"location":"user-guide/images/#neural-network-upscaling","title":"Neural Network Upscaling","text":"<p>For images below 300 DPI, Lithic Editor provides options for automatic enhancement using deep learning models:</p> <p>ESPCN (Efficient Sub-Pixel CNN)</p> <ul> <li>Faster processing speed</li> <li>Suitable for most lithic drawings</li> <li>2x upscaling factor</li> </ul> <p>FSRCNN (Fast Super-Resolution CNN)</p> <ul> <li>Higher quality results</li> <li>Better edge preservation</li> <li>Ideal for complex illustrations</li> </ul> <p>For technical details about these super-resolution models, see OpenCV Super Resolution Tutorial.</p>"},{"location":"user-guide/images/#image-preparation-best-practices","title":"Image Preparation Best Practices","text":""},{"location":"user-guide/images/#before-processing","title":"Before Processing","text":"<ol> <li>Scan settings: Use black and white or grayscale mode at 300+ DPI</li> <li>File format: Save as PNG or TIFF to avoid compression artifacts</li> <li>Orientation: Ensure drawings are properly aligned</li> <li>Cropping: Remove unnecessary borders or scale bars</li> </ol>"},{"location":"user-guide/images/#common-issues-to-avoid","title":"Common Issues to Avoid","text":"<p>Lithic Editor and Annotator provides options for cleaning and enhancing images. However, for the best and quickest experience try to avoid images with:</p> <ul> <li>Low contrast: Gray lines on off-white backgrounds reduce accuracy</li> <li>Broken lines: Gaps in structural elements may be misidentified</li> <li>Text overlays: Remove labels or annotations before processing</li> <li>Multiple artifacts: Process one lithic illustration per image</li> </ul>"},{"location":"user-guide/images/#special-considerations","title":"Special Considerations","text":""},{"location":"user-guide/images/#cortex-preservation","title":"Cortex Preservation","text":"<p>Lithic Editor intelligently handles cortex stippling: - Automatically detects and preserves stippled areas - Maintains archaeological accuracy - Can be toggled on/off based on your needs</p>"},{"location":"user-guide/images/#complex-illustrations","title":"Complex Illustrations","text":"<p>For drawings with intricate details: - Enable debug mode to review processing steps - Use the brush tool for manual pre-processing - Consider processing in sections for very large images</p>"},{"location":"user-guide/images/#next-steps","title":"Next Steps","text":"<p>Once you understand image requirements and have prepared your lithic drawings, continue to Processing Images to learn how to remove ripple lines and clean your illustrations.</p>"},{"location":"user-guide/interface/","title":"User Guide Overview","text":""},{"location":"user-guide/interface/#introduction","title":"Introduction","text":"<p>This section covers all aspects of the Lithic Editor and Annotator GUI.</p>"},{"location":"user-guide/interface/#launch-lithic-editor-gui","title":"Launch Lithic Editor GUI","text":"<p>To launch the application GUI from your terminal: <pre><code>lithic-editor --gui\n</code></pre></p>"},{"location":"user-guide/interface/#main-interface","title":"Main Interface","text":"<p>The Lithic Editor interface contains eight main sections:</p>"},{"location":"user-guide/interface/#1-file-controls-top-left","title":"1. File Controls (Top Left)","text":"<ul> <li>Load Image - Select input file</li> <li>Process Image - Start ripple removal</li> <li>Save Result - Export processed image</li> <li>Exit - Close application</li> </ul>"},{"location":"user-guide/interface/#2-drawing-tools-left-below-file-controls","title":"2. Drawing Tools (Left, Below File Controls)","text":"<p>The brush tool is used to edit images in the Input Image window and will not affect your original image.</p> <ul> <li>Activate Brush - Enable/disable brush editing</li> <li>Color - Choose brush color (White/Black)</li> <li>Size - Adjust brush size (1-10)</li> <li>Clear Brush - Reset brush settings and clear brush marks</li> </ul>"},{"location":"user-guide/interface/#3-arrow-annotations-left-below-drawing-tools","title":"3. Arrow Annotations (Left, Below Drawing Tools)","text":"<p>After ripples are remove arrows can be added to indicate striking direction.</p> <ul> <li>Add Arrow - Create new arrow</li> <li>Arrow Color - Change arrow color</li> <li>Delete Arrow - Remove selected arrow</li> <li>Clear Arrows - Remove all arrows</li> <li>Rotate - Shift+drag to rotate</li> <li>Rresize - Option+drag to resize</li> </ul>"},{"location":"user-guide/interface/#4-options-and-dpi-settings-top-right","title":"4. Options and DPI Settings (Top Right)","text":"<ul> <li>Debug Images - View and save debug images (checkbox). Images load in Processing Steps window. Images automatically saved to image_debug directory. Unchecked by default</li> <li>Preserve Cortex Stippling - Keep cortex texture (checkbox). Checked by default</li> <li>DPI Settings - Leave unset or set custom DPI</li> </ul>"},{"location":"user-guide/interface/#5-input-image-window-center-left","title":"5. Input Image Window (Center Left)","text":"<ul> <li>Shows imported image copy of original drawing</li> </ul>"},{"location":"user-guide/interface/#6-processed-image-arrow-annotations-center","title":"6. Processed Image / Arrow Annotations (Center)","text":"<ul> <li>Shows cleaned result after processing</li> <li>Canvas for arrow annotation overlay</li> </ul>"},{"location":"user-guide/interface/#7-processing-steps-center-right-when-enabled","title":"7. Processing Steps (Center Right when enabled)","text":"<ul> <li>Debug visualization window</li> <li>Appears when debug images option is enabled (hidden by default)</li> </ul>"},{"location":"user-guide/interface/#8-processing-log-bottom","title":"8. Processing Log (Bottom)","text":"<ul> <li>Shows real-time processing information</li> <li>Displays brush settings and status messages</li> </ul>"},{"location":"user-guide/interface/#9-processing-status-bottom","title":"9. Processing Status (Bottom)","text":"<ul> <li>Shows current application state (\"Ready\", processing status)</li> </ul>"},{"location":"user-guide/interface/#navigation","title":"Navigation","text":"<p>Use the sidebar to explore specific topics:</p> <ul> <li>Processing Images - Detailed processing guide</li> <li>Adding Annotations - Arrow annotation techniques</li> <li>Saving Results - Export options and formats</li> </ul>"},{"location":"user-guide/interface/#workflow-overview","title":"Workflow Overview","text":"<p>The typical workflow for processing lithic drawings follows these steps:</p> <pre><code>graph LR\n    A[Load Image] --&gt; B[Check DPI]\n    B --&gt; C[Process Image]\n    C --&gt; D{Success?}\n    D --&gt;|No| E[Image Debug &amp; Adjust]\n    E --&gt; C\n    D --&gt;|Yes| F[Add Annotations]\n    F --&gt; G[Save Result]</code></pre>"},{"location":"user-guide/interface/#research-documentation","title":"Research Documentation","text":"<ol> <li>Process with debug enabled</li> <li>Save all intermediate steps</li> <li>Document parameters used</li> <li>Archive original and processed versions</li> </ol>"},{"location":"user-guide/interface/#understanding-the-algorithm","title":"Understanding the Algorithm","text":"<p>The ripple removal algorithm works through several stages:</p>"},{"location":"user-guide/interface/#stage-1-skeletonization","title":"Stage 1: Skeletonization","text":"<p>Reduces lines to single-pixel width while preserving connectivity.</p>"},{"location":"user-guide/interface/#stage-2-graph-construction","title":"Stage 2: Graph Construction","text":"<p>Builds a network representation of line segments.</p>"},{"location":"user-guide/interface/#stage-3-pattern-analysis","title":"Stage 3: Pattern Analysis","text":"<p>Identifies ripple patterns based on: - Line orientation - Spacing consistency - Length distribution</p>"},{"location":"user-guide/interface/#stage-4-selective-removal","title":"Stage 4: Selective Removal","text":"<p>Removes identified ripple lines while preserving: - Structural boundaries - Tool edges - Important features</p>"},{"location":"user-guide/interface/#stage-5-enhancement","title":"Stage 5: Enhancement","text":"<p>Cleans up the result and restores line quality.</p>"},{"location":"user-guide/interface/#tips-and-tricks","title":"Tips and Tricks","text":"<p>Quick Processing</p> <p>For faster processing of large images, resize to 2000-3000px maximum dimension first.</p> <p>Arrow Visibility</p> <p>Use contrasting colors for arrows - black on light backgrounds, white on dark.</p> <p>Batch Operations</p> <p>Use the CLI for processing multiple images with consistent settings.</p> <p>Quality Control</p> <p>Enable \"View and Save Debug Images\" and review the processing steps to ensure important features aren't removed.</p>"},{"location":"user-guide/interface/#getting-support","title":"Getting Support","text":"<p>If you need help:</p> <ol> <li>Check Documentation: Review relevant guide sections</li> <li>GitHub Issues: Search existing issues or create new one</li> <li>Community Forum: Ask in GitHub Discussions</li> <li>Direct Contact: Email jg760@cam.ac.uk for research inquiries</li> </ol>"},{"location":"user-guide/interface/#next-steps","title":"Next Steps","text":"<ul> <li>Continue to Processing Images for detailed processing instructions</li> <li>Explore Output and Saving Options for export settings and saving images</li> </ul>"},{"location":"user-guide/output/","title":"Output Guide","text":"<p>This page describes the various output files generated by Lithic Editor.</p>"},{"location":"user-guide/output/#output-types","title":"Output Types","text":""},{"location":"user-guide/output/#processed-images","title":"Processed Images","text":"<p>The primary output of the software.</p>"},{"location":"user-guide/output/#debug-images","title":"Debug Images","text":"<p>Optional intermediate processing steps.</p>"},{"location":"user-guide/output/#annotated-images","title":"Annotated Images","text":"<p>Processed images with arrow overlays.</p>"},{"location":"user-guide/output/#file-formats","title":"File Formats","text":"<p>Supported output formats: - PNG (recommended) - JPEG - TIFF</p>"},{"location":"user-guide/output/#file-naming","title":"File Naming","text":"<p>Output files follow standard naming conventions.</p>"},{"location":"user-guide/output/#output-locations","title":"Output Locations","text":"<p>Files can be saved to custom locations or default directories.</p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":""},{"location":"user-guide/overview/#introduction","title":"Introduction","text":"<p>Lithic Editor and Annotator is a specialized software tool developed for the systematic processing and enhancement of archaeological lithic drawings. This comprehensive guide provides detailed instructions for utilizing the software's core functionalities: automated ripple line removal, cortex preservation, neural network-based image enhancement, and vector-based directional arrow annotation.</p>"},{"location":"user-guide/overview/#before-you-begin","title":"Before You Begin","text":"<p>Ensure you have:</p> <ul> <li>Lithic Editor and Annotator installed (Installation Guide)</li> <li>High-resolution (&gt;= 300 DPI) lithic drawing images (PNG, JPEG, TIFF recommended)</li> <li>Basic familiarity with image editing concepts</li> </ul>"},{"location":"user-guide/overview/#user-guide-contents","title":"User Guide Contents","text":"<p>This guide walks you through the complete workflow for processing, annotating, and saving lithic drawings:</p> <ol> <li>Lithic Editor and Annotator GUI - Launch the application and understand the interface</li> <li>Lithic Illustrations - Image types, quality requirements, and preparation guidelines</li> <li>Processing Images - Clean images, remove ripple lines, and preserve important features<ul> <li>Load images</li> <li>Ripple remover</li> <li>Brush tool</li> <li>Image debugging</li> <li>Cortex preservation</li> <li>Neural network upscaling for low-resolution (&lt; 300 DPI) images</li> </ul> </li> <li>Annotations - Add directional arrows to images<ul> <li>Add and remove arrows</li> <li>Resize and rotate arrows</li> </ul> </li> <li>Saving Options - Save your work in multiple formats</li> <li>CLI tool - run Lithic Editor and Annotator in the command line</li> <li>Troubleshooting - Guide to problems and errors</li> </ol>"},{"location":"user-guide/overview/#getting-support","title":"Getting Support","text":"<p>If you need help:</p> <ol> <li>Check Documentation: Review relevant guide sections</li> <li>GitHub Issues: Search existing issues or create new one</li> <li>Community Forum: Ask in GitHub Discussions</li> <li>Direct Contact: Email jg760@cam.ac.uk for research inquiries</li> </ol>"},{"location":"user-guide/processing/","title":"Processing Images","text":"<p>The image processing engine in Lithic Editor uses advanced algorithms to automatically identify and remove ripple lines while preserving the structural elements of lithic drawings.</p>"},{"location":"user-guide/processing/#workflow-overview","title":"Workflow Overview","text":"<p>The typical workflow for processing lithic drawings follows these steps:</p> <pre><code>graph LR\n    A[Load Image] --&gt; B[Check DPI]\n    B --&gt; C{DPI &lt; 300?}\n    C --&gt;|Yes| D[Neural Network Upscaling]\n    C --&gt;|No| E[Process Image]\n    D --&gt; E\n    E --&gt; F{Success?}\n    F --&gt;|No| G[Image Debug &amp; Adjust]\n    G --&gt; E\n    F --&gt;|Yes| H[Add Annotations]\n    H --&gt; I[Save Result]</code></pre>"},{"location":"user-guide/processing/#loading-images","title":"Loading Images","text":""},{"location":"user-guide/processing/#supported-formats","title":"Supported Formats","text":"<ul> <li>PNG (recommended): Lossless compression, transparency support</li> <li>JPEG/JPG: Widely compatible, smaller file sizes</li> <li>TIFF/TIF: Professional quality, uncompressed</li> <li>BMP: Simple format, uncompressed</li> </ul>"},{"location":"user-guide/processing/#image-requirements","title":"Image Requirements","text":"<p>For best results, your images should have: - High contrast (black lines on white background) - Resolution of at least 300 DPI (automatic upscaling available for lower DPI) - Clean, continuous lines - Minimal noise or artifacts</p>"},{"location":"user-guide/processing/#neural-network-upscaling","title":"Neural Network Upscaling","text":"<p>Lithic Editor includes ESPCN and FSRCNN neural network models to automatically upscale low-DPI images: - ESPCN: Efficient Sub-Pixel CNN, faster processing - FSRCNN: Fast Super-Resolution CNN, higher quality - Automatic DPI detection from image metadata - User dialogs for DPI selection when metadata is missing - 300 DPI target for optimal processing results</p> <p>For technical details about these super-resolution models, see OpenCV Super Resolution Tutorial.</p>"},{"location":"user-guide/processing/#cortex-preservation","title":"Cortex Preservation","text":"<p>Automatically preserves natural cortex stippling on lithic artifacts: - Intelligent separation: Distinguishes cortex stippling from structural lines - Pre-processing preservation: Cortex bypasses destructive skeletonization - Archaeological accuracy: Maintains cortex vs. worked surface distinction - User control: Toggle preservation on/off via GUI checkbox or CLI flag</p>"},{"location":"user-guide/processing/#using-the-gui","title":"Using the GUI","text":""},{"location":"user-guide/processing/#step-by-step-processing","title":"Step-by-Step Processing","text":"<ol> <li> <p>Load Your Image <pre><code>Click \"Load Image\" \u2192 Select file \u2192 Open\n</code></pre></p> </li> <li> <p>DPI Detection and Upscaling</p> </li> <li>System automatically detects DPI from image metadata</li> <li>If missing, dialog prompts for DPI selection (72, 96, 150, 200 or custom)</li> <li> <p>If below 300 DPI, upscaling dialog offers ESPCN/FSRCNN options</p> </li> <li> <p>Review Input</p> </li> <li>Check image quality in Input panel</li> <li>Verify correct orientation</li> <li> <p>Note any problem areas</p> </li> <li> <p>Process Image <pre><code>Click \"Process Image\" \u2192 Wait for completion\n</code></pre></p> </li> <li> <p>Review Results</p> </li> <li>Compare before/after</li> <li>Check debug steps if enabled</li> <li>Verify structural preservation</li> </ol>"},{"location":"user-guide/processing/#processing-options","title":"Processing Options","text":""},{"location":"user-guide/processing/#debug-mode","title":"Debug Mode","text":"<p>Enable to view and save intermediate processing steps: - Checkbox: \"View and Save Debug Images\" - Shows processing steps in the Processing Steps panel - Creates <code>image_debug/</code> folder with all algorithm stages</p>"},{"location":"user-guide/processing/#quality-settings","title":"Quality Settings","text":"<p>Adjust processing parameters: - Line thickness tolerance - Ripple pattern sensitivity - Structural preservation level</p>"},{"location":"user-guide/processing/#quality-control","title":"Quality Control","text":"<p>Always Review Debug Images</p> <p>Enable debug mode for important images to verify the algorithm isn't removing structural elements.</p>"},{"location":"user-guide/processing/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/processing/#for-optimal-results","title":"For Optimal Results","text":"<ol> <li>Image Preparation</li> <li>Use high-resolution scans (300+ DPI)</li> <li>Ensure good contrast</li> <li> <p>Remove unnecessary elements</p> </li> <li> <p>Processing Settings</p> </li> <li>Enable \"View and Save Debug Images\" for complex images</li> <li>Review intermediate steps in Processing Steps panel</li> <li> <p>Set custom DPI if needed (default preserves original)</p> </li> <li> <p>Annotation Guidelines</p> </li> <li>Maintain consistent arrow sizes</li> <li>Use appropriate colors</li> <li>Align with archaeological standards</li> </ol>"},{"location":"user-guide/processing/#parallel-processing-using-the-api","title":"Parallel Processing (using the API)","text":"<pre><code>from multiprocessing import Pool\nfrom lithic_editor.processing import process_lithic_drawing\n\ndef process_file(filename):\n    return process_lithic_drawing(filename)\n\nwith Pool(processes=4) as pool:\n    results = pool.map(process_file, file_list)\n</code></pre>"},{"location":"user-guide/processing/#next-steps","title":"Next Steps","text":"<ul> <li>Continue to Output Guide for information about output files and formats</li> </ul>"},{"location":"user-guide/troubleshooting/","title":"Troubleshooting","text":""},{"location":"user-guide/troubleshooting/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"user-guide/troubleshooting/#processing-issues","title":"Processing Issues","text":"Problem Solution Structural lines removed Adjust algorithm sensitivity Ripples not fully removed Check image contrast Processing too slow Reduce image size Memory errors Close other applications"},{"location":"user-guide/troubleshooting/#annotation-issues","title":"Annotation Issues","text":"Problem Solution Arrows too small Increase DPI setting Can't select arrow Click closer to arrow center Arrows disappear Check arrow color vs background"},{"location":"user-guide/troubleshooting/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/troubleshooting/#common-issues","title":"Common Issues","text":"Structural lines are removed <p>Causes: - Lines too similar to ripple pattern - Incorrect threshold settings</p> <p>Solutions: - Increase structural preservation setting - Manually edit before processing - Use debug mode to identify issue</p> Ripples not fully removed <p>Causes: - Inconsistent ripple pattern - Poor image quality - Ripples too thick</p> <p>Solutions: - Improve scan quality - Pre-process to enhance contrast - Adjust sensitivity settings</p> Processing takes too long <p>Causes: - Image too large - Insufficient memory - Complex line patterns</p> <p>Solutions: - Resize image to 3000px max - Close other applications - Use batch processing overnight</p>"},{"location":"user-guide/troubleshooting/#image-preparation-tips","title":"Image Preparation Tips","text":"<ol> <li>Scanning</li> <li>Use 300+ DPI</li> <li>Black and white mode</li> <li> <p>Clean scanner glass</p> </li> <li> <p>Editing</p> </li> <li>Remove text and scales</li> <li>Fill gaps in lines</li> <li> <p>Increase contrast</p> </li> <li> <p>Format</p> </li> <li>Save as PNG</li> <li>Use lossless compression</li> <li>Preserve metadata</li> </ol>"},{"location":"user-guide/troubleshooting/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/troubleshooting/#memory-management","title":"Memory Management","text":"<ul> <li>Process images under 4000\u00d74000 pixels</li> <li>Close unnecessary applications</li> <li>Use 64-bit Python</li> </ul>"},{"location":"user-guide/troubleshooting/#speed-improvements","title":"Speed Improvements","text":"<ul> <li>Resize large images first</li> <li>Process in batches overnight</li> <li>Use SSD for temp files</li> </ul>"}]}