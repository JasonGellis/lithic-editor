{"config":{"lang":["en"],"separator":"[\\s\\-,:!=\\[\\]()\"`/]+|\\.(?!\\d)|&[lg]t;|(?!\\b)(?=[A-Z][a-z])","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Lithic Editor and Annotator","text":"Archaeological Image Processing Tool <p>Automatically remove ripple lines from lithic drawings while preserving structural elements</p> <p>Key Features</p> <ul> <li>\u2728 Intelligent Ripple Removal - Advanced algorithms distinguish between structural and decorative lines</li> <li>\ud83c\udfaf Precise Annotations - Add directional arrows to indicate striking patterns</li> <li>\ud83d\uddbc\ufe0f Publication Ready - Maintain DPI and produce high-quality outputs</li> <li>\ud83d\ude80 Easy to Use - Intuitive GUI and command-line interface</li> </ul>"},{"location":"#what-is-lithic-editor","title":"What is Lithic Editor?","text":"<p>Lithic Editor and Annotator is a specialized tool designed for archaeological research, specifically for processing technical drawings of lithic artifacts. It addresses two critical challenges in lithic illustration:</p> <ol> <li> <p>Automated Ripple Line Removal: The software uses advanced graph-based algorithms to identify and remove hatching/ripple lines while preserving the essential structural elements of the drawing.</p> </li> <li> <p>Technical Annotation System: Provides intuitive tools for adding directional arrows to indicate striking direction and flake scar patterns - essential for archaeological analysis.</p> </li> </ol>"},{"location":"#quick-start","title":"Quick Start","text":"GUI ApplicationPython APICommand Line <pre><code># Install the package\npip install git+https://github.com/JasonGellis/lithic-editor.git\n\n# Launch the GUI\nlithic-editor --gui\n</code></pre> <pre><code>from lithic_editor.processing import process_lithic_drawing_improved\n\n# Process an image\nresult = process_lithic_drawing_improved(\n    \"lithic_drawing.png\",\n    save_debug=True\n)\n</code></pre> <pre><code># Process a single image\nlithic-editor process drawing.png --output results/\n</code></pre>"},{"location":"#visual-example","title":"Visual Example","text":"Before Processing <p>Original drawing with ripple lines</p> After Processing <p>Clean structural elements preserved</p>"},{"location":"#who-is-this-for","title":"Who is this for?","text":"<ul> <li>Archaeologists working with lithic illustrations</li> <li>Researchers analyzing stone tool technology</li> <li>Museum Curators preparing artifact documentation</li> <li>Students studying archaeological illustration techniques</li> </ul>"},{"location":"#getting-started","title":"Getting Started","text":"\ud83d\udce6 Installation <p>Set up Lithic Editor on your system</p> Install Guide \ud83d\ude80 Quick Start <p>Process your first lithic drawing</p> Tutorial \ud83d\udcd6 User Guide <p>Learn all features and workflows</p> Documentation"},{"location":"#support","title":"Support","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Email: jg760@cam.ac.uk</li> </ul> <p>Acknowledgements</p> <p>Special thanks to The British Academy for funding this research project.</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#image-processing","title":"Image Processing","text":""},{"location":"features/#intelligent-ripple-removal","title":"Intelligent Ripple Removal","text":"<p>The core feature of Lithic Editor uses advanced graph-based analysis to identify and remove hatching/ripple lines while preserving structural features. The algorithm:</p> <ul> <li>Analyzes line patterns using skeletonization</li> <li>Identifies ripple lines through pattern recognition</li> <li>Preserves structural elements and edges</li> <li>Maintains image quality and resolution</li> </ul>"},{"location":"features/#processing-visualization","title":"Processing Visualization","text":"<p>View step-by-step processing stages to understand how the algorithm works:</p> <ul> <li>Original image analysis</li> <li>Skeletonization process</li> <li>Line segment detection</li> <li>Ripple identification</li> <li>Final cleaned result</li> </ul>"},{"location":"features/#manual-editing-tools","title":"Manual Editing Tools","text":"<p>Fine-tune your images before processing:</p> <ul> <li>Brush tools for cleanup</li> <li>Eraser for removing artifacts</li> <li>Adjustable brush sizes</li> <li>Real-time preview</li> </ul>"},{"location":"features/#annotation-tools","title":"Annotation Tools","text":""},{"location":"features/#directional-arrows","title":"Directional Arrows","text":"<p>Add professional-quality arrows to indicate:</p> <ul> <li>Force direction on lithic artifacts</li> <li>Flake scar patterns</li> <li>Manufacturing techniques</li> <li>Impact points</li> </ul>"},{"location":"features/#arrow-customization","title":"Arrow Customization","text":"<p>Complete control over arrow appearance:</p> <ul> <li>Size: Adjust arrow dimensions</li> <li>Rotation: Orient to any angle</li> <li>Color: Choose from full color palette</li> <li>Position: Precise placement on image</li> </ul>"},{"location":"features/#intuitive-controls","title":"Intuitive Controls","text":"Windows/LinuxmacOS <ul> <li>Move: Click and drag</li> <li>Rotate: Shift + drag</li> <li>Resize: Alt + drag</li> <li>Delete: Select and press Delete</li> </ul> <ul> <li>Move: Click and drag</li> <li>Rotate: Shift + drag</li> <li>Resize: Option + drag</li> <li>Delete: Select and press Delete</li> </ul>"},{"location":"features/#technical-features","title":"Technical Features","text":""},{"location":"features/#dpi-preservation","title":"DPI Preservation","text":"<ul> <li>Maintains original image resolution</li> <li>Preserves DPI metadata</li> <li>Ensures publication-quality output</li> <li>Supports high-resolution displays</li> </ul>"},{"location":"features/#multiple-output-formats","title":"Multiple Output Formats","text":"Format Features Best For PNG Lossless, transparency support Web, presentations JPEG Compressed, wide compatibility Publications, sharing TIFF Uncompressed, professional Archival, printing"},{"location":"features/#batch-processing","title":"Batch Processing","text":"<p>Process multiple images efficiently:</p> <ul> <li>Command-line batch operations</li> <li>Consistent processing parameters</li> <li>Progress tracking</li> <li>Error handling</li> </ul>"},{"location":"features/#cross-platform-support","title":"Cross-Platform Support","text":"<p>Works seamlessly on:</p> <ul> <li>\u2705 Windows 10/11</li> <li>\u2705 macOS 10.15+</li> <li>\u2705 Linux (Ubuntu, Fedora, etc.)</li> </ul>"},{"location":"features/#advanced-features","title":"Advanced Features","text":""},{"location":"features/#debug-mode","title":"Debug Mode","text":"<p>Save intermediate processing steps for:</p> <ul> <li>Algorithm verification</li> <li>Quality assurance</li> <li>Research purposes</li> <li>Teaching and training</li> </ul>"},{"location":"features/#api-integration","title":"API Integration","text":"<p>Integrate Lithic Editor into your workflow:</p> <pre><code>from lithic_editor.processing import process_lithic_drawing_improved\n\n# Process with custom parameters\nresult = process_lithic_drawing_improved(\n    image_path=\"artifact.png\",\n    save_debug=True,\n    output_dpi=300\n)\n</code></pre>"},{"location":"features/#command-line-interface","title":"Command-Line Interface","text":"<p>Full functionality from the terminal:</p> <pre><code># Process with options\nlithic-editor process image.png --output results/ --debug\n\n# Batch processing\nfor file in *.png; do\n    lithic-editor process \"$file\" --quiet\ndone\n</code></pre>"},{"location":"screenshots/","title":"Screenshots","text":""},{"location":"screenshots/#main-application-interface","title":"Main Application Interface","text":""},{"location":"screenshots/#full-application-view","title":"Full Application View","text":"<p>The complete Lithic Editor interface showing all four panels in action.</p> <p></p>"},{"location":"screenshots/#processing-examples","title":"Processing Examples","text":""},{"location":"screenshots/#before-and-after-comparison","title":"Before and After Comparison","text":"Original Drawing <p>Lithic drawing with ripple lines</p>     ![Before](assets/screenshots/before-processing.png)    Processed Result <p>Clean drawing with ripples removed</p>     ![After](assets/screenshots/after-processing.png)"},{"location":"screenshots/#processing-steps-visualization","title":"Processing Steps Visualization","text":""},{"location":"screenshots/#algorithm-stages","title":"Algorithm Stages","text":"<p>See how the algorithm processes your image step by step:</p> <ol> <li> <p>Original Image </p> </li> <li> <p>Skeletonization </p> </li> <li> <p>Line Detection </p> </li> <li> <p>Ripple Identification </p> </li> <li> <p>Final Result </p> </li> </ol>"},{"location":"screenshots/#annotation-features","title":"Annotation Features","text":""},{"location":"screenshots/#arrow-annotations","title":"Arrow Annotations","text":"<p>Adding directional indicators to processed images:</p> <p></p>"},{"location":"screenshots/#arrow-customization","title":"Arrow Customization","text":"<p>Various arrow styles and colors:</p> <p></p>"},{"location":"screenshots/#platform-screenshots","title":"Platform Screenshots","text":""},{"location":"screenshots/#windows","title":"Windows","text":""},{"location":"screenshots/#macos","title":"macOS","text":""},{"location":"screenshots/#linux","title":"Linux","text":""},{"location":"screenshots/#command-line-interface","title":"Command Line Interface","text":""},{"location":"screenshots/#cli-help-output","title":"CLI Help Output","text":"<p><pre><code>$ lithic-editor --help\n</code></pre> </p>"},{"location":"screenshots/#batch-processing","title":"Batch Processing","text":"<p><pre><code>$ lithic-editor process *.png --output results/\n</code></pre> </p> <p>Screenshots Coming Soon</p> <p>These screenshots will be added as the documentation is updated. If you'd like to contribute screenshots, please see our Contributing Guide.</p>"},{"location":"developer/contributing/","title":"Contributing to Lithic Editor","text":"<p>Thank you for your interest in contributing to the Lithic Editor and Annotator! This guide will help you get started.</p>"},{"location":"developer/contributing/#development-setup","title":"Development Setup","text":""},{"location":"developer/contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.7 or higher</li> <li>Git</li> <li>Basic familiarity with PyQt5 and image processing concepts</li> </ul>"},{"location":"developer/contributing/#setting-up-your-environment","title":"Setting Up Your Environment","text":"<ol> <li> <p>Fork and clone the repository: <pre><code>git clone https://github.com/YourUsername/lithic-editor.git\ncd lithic-editor\n</code></pre></p> </li> <li> <p>Create a virtual environment (recommended): <pre><code>python -m venv lithic-env\nsource lithic-env/bin/activate  # Linux/macOS\n# or\nlithic-env\\Scripts\\activate     # Windows\n</code></pre></p> </li> <li> <p>Install in development mode: <pre><code># Install with test dependencies\npip install -e \".[test]\"\n\n# Or install with all development tools\npip install -e \".[dev]\"\n\n# Or install everything (dev + docs + test)\npip install -e \".[dev,docs,test]\"\n</code></pre></p> </li> </ol>"},{"location":"developer/contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"developer/contributing/#running-tests","title":"Running Tests","text":"<p>Always run tests before submitting changes:</p> <pre><code># Run all tests\npytest\n\n# Run with coverage\npytest --cov=lithic_editor --cov-report=html\n\n# Run specific test file\npytest tests/test_processing.py\n\n# Run specific test\npytest tests/test_processing.py::TestProcessingModule::test_process_image_from_file\n\n# View coverage report\nopen htmlcov/index.html  # macOS\nxdg-open htmlcov/index.html  # Linux\nstart htmlcov/index.html  # Windows\n</code></pre>"},{"location":"developer/contributing/#code-quality","title":"Code Quality","text":"<p>We use several tools to maintain code quality:</p> <pre><code># Format code\nblack lithic_editor tests\n\n# Check style\nflake8 lithic_editor tests\n\n# Type checking (optional)\nmypy lithic_editor\n</code></pre>"},{"location":"developer/contributing/#running-the-application","title":"Running the Application","text":"<p>Test your changes:</p> <pre><code># GUI mode\nlithic-editor --gui\n\n# CLI mode\nlithic-editor process example.png --debug\n\n# Help system\nlithic-editor docs --offline\n</code></pre>"},{"location":"developer/contributing/#project-structure","title":"Project Structure","text":"<pre><code>lithic_editor/\n\u251c\u2500\u2500 annotations/         # Arrow annotation system\n\u2502   \u251c\u2500\u2500 arrows.py       # Arrow classes and canvas\n\u2502   \u2514\u2500\u2500 integration.py  # GUI integration helpers\n\u251c\u2500\u2500 cli/                # Command-line interface\n\u2502   \u251c\u2500\u2500 main.py        # Main CLI entry point\n\u2502   \u251c\u2500\u2500 help.py        # Help system\n\u2502   \u2514\u2500\u2500 docs_server.py # Documentation server\n\u251c\u2500\u2500 gui/                # Graphical user interface\n\u2502   \u2514\u2500\u2500 main_window.py # Main application window\n\u2514\u2500\u2500 processing/         # Image processing algorithms\n    \u2514\u2500\u2500 ripple_removal.py # Core processing engine\n\ntests/                  # Test suite\n\u251c\u2500\u2500 conftest.py        # Test configuration\n\u251c\u2500\u2500 test_processing.py # Processing tests\n\u251c\u2500\u2500 test_annotations.py # Annotation tests\n\u251c\u2500\u2500 test_cli.py        # CLI tests\n\u2514\u2500\u2500 test_gui.py        # GUI tests\n\ndocs/                   # Documentation source\n\u251c\u2500\u2500 index.md           # Homepage\n\u251c\u2500\u2500 user-guide/        # User documentation\n\u251c\u2500\u2500 developer/         # Developer documentation\n\u2514\u2500\u2500 getting-started/   # Installation guides\n</code></pre>"},{"location":"developer/contributing/#writing-tests","title":"Writing Tests","text":""},{"location":"developer/contributing/#test-categories","title":"Test Categories","text":"<ol> <li>Unit Tests: Test individual functions/classes</li> <li>Integration Tests: Test component interactions</li> <li>GUI Tests: Test user interface components</li> <li>CLI Tests: Test command-line interface</li> </ol>"},{"location":"developer/contributing/#test-guidelines","title":"Test Guidelines","text":"<ul> <li>Write tests for new features</li> <li>Maintain test coverage above 80%</li> <li>Use descriptive test names</li> <li>Use fixtures for common setup</li> <li>Mock external dependencies</li> </ul>"},{"location":"developer/contributing/#example-test","title":"Example Test","text":"<pre><code>def test_process_image_with_debug(sample_image, temp_dir):\n    \"\"\"Test processing with debug output enabled.\"\"\"\n    result = process_lithic_drawing_improved(\n        image_path=str(sample_image),\n        output_folder=str(temp_dir),\n        save_debug=True\n    )\n\n    assert result is not None\n    debug_files = list(temp_dir.glob(\"*.png\"))\n    assert len(debug_files) &gt; 0\n</code></pre>"},{"location":"developer/contributing/#documentation","title":"Documentation","text":""},{"location":"developer/contributing/#building-documentation","title":"Building Documentation","text":"<pre><code># Install documentation dependencies\npip install -e \".[docs]\"\n\n# Serve documentation locally\nmkdocs serve\n\n# Build static documentation\nmkdocs build\n\n# Deploy to GitHub Pages (maintainers only)\nmkdocs gh-deploy\n</code></pre>"},{"location":"developer/contributing/#writing-documentation","title":"Writing Documentation","text":"<ul> <li>Use clear, concise language</li> <li>Include code examples</li> <li>Add screenshots for UI features</li> <li>Follow the existing structure</li> </ul>"},{"location":"developer/contributing/#submission-guidelines","title":"Submission Guidelines","text":""},{"location":"developer/contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li> <p>Create a feature branch: <pre><code>git checkout -b feature/your-feature-name\n</code></pre></p> </li> <li> <p>Make your changes following the coding standards</p> </li> <li> <p>Write tests for new functionality</p> </li> <li> <p>Update documentation if needed</p> </li> <li> <p>Run the full test suite: <pre><code>pytest\n</code></pre></p> </li> <li> <p>Check code quality: <pre><code>black lithic_editor tests\nflake8 lithic_editor tests\n</code></pre></p> </li> <li> <p>Commit your changes: <pre><code>git add .\ngit commit -m \"Add feature: your feature description\"\n</code></pre></p> </li> <li> <p>Push and create pull request: <pre><code>git push origin feature/your-feature-name\n</code></pre></p> </li> </ol>"},{"location":"developer/contributing/#pull-request-requirements","title":"Pull Request Requirements","text":"<ul> <li> All tests pass</li> <li> Code coverage maintained or improved</li> <li> Documentation updated (if applicable)</li> <li> Code follows style guidelines</li> <li> Descriptive commit messages</li> <li> Pull request description explains changes</li> </ul>"},{"location":"developer/contributing/#getting-help","title":"Getting Help","text":"<ul> <li>Issues: GitHub Issues</li> <li>Discussions: GitHub Discussions</li> <li>Email: jg760@cam.ac.uk</li> </ul>"},{"location":"developer/contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please note that this project is released with a Contributor Code of Conduct. By participating in this project you agree to abide by its terms.</p>"},{"location":"developer/contributing/#areas-for-contribution","title":"Areas for Contribution","text":"<ul> <li>Algorithm improvements: Enhance ripple detection accuracy</li> <li>GUI enhancements: Improve user experience</li> <li>Documentation: Add examples and tutorials</li> <li>Testing: Increase test coverage</li> <li>Performance: Optimize processing speed</li> <li>Platform support: Improve cross-platform compatibility</li> </ul> <p>Thank you for contributing to archaeological research tools! \ud83c\udfdb\ufe0f</p>"},{"location":"developer/testing/","title":"Testing Guide","text":""},{"location":"developer/testing/#overview","title":"Overview","text":"<p>Lithic Editor uses a comprehensive test suite to ensure reliability and maintain code quality. This guide covers how to run, write, and understand the tests.</p>"},{"location":"developer/testing/#quick-start","title":"Quick Start","text":""},{"location":"developer/testing/#installation","title":"Installation","text":"<pre><code># Install with test dependencies\npip install -e \".[test]\"\n\n# Or install all development dependencies\npip install -e \".[dev]\"\n</code></pre>"},{"location":"developer/testing/#running-tests","title":"Running Tests","text":"<pre><code># Run all tests\npytest\n\n# Run with verbose output\npytest -v\n\n# Run specific test file\npytest tests/test_processing.py\n\n# Run with coverage\npytest --cov=lithic_editor --cov-report=html\n</code></pre>"},{"location":"developer/testing/#test-structure","title":"Test Structure","text":""},{"location":"developer/testing/#test-organization","title":"Test Organization","text":"<pre><code>tests/\n\u251c\u2500\u2500 conftest.py           # Shared fixtures and configuration\n\u251c\u2500\u2500 test_processing.py    # Image processing tests\n\u251c\u2500\u2500 test_annotations.py   # Arrow annotation tests  \n\u251c\u2500\u2500 test_cli.py          # Command-line interface tests\n\u251c\u2500\u2500 test_gui.py          # GUI component tests\n\u2514\u2500\u2500 README.md            # Test documentation\n</code></pre>"},{"location":"developer/testing/#test-categories","title":"Test Categories","text":""},{"location":"developer/testing/#1-processing-tests-test_processingpy","title":"1. Processing Tests (<code>test_processing.py</code>)","text":"<p>Tests the core image processing algorithms:</p> <ul> <li>Image loading from files and numpy arrays</li> <li>Ripple removal algorithm correctness</li> <li>Debug output generation</li> <li>DPI preservation and handling</li> <li>Multiple image format support</li> <li>Error handling and edge cases</li> </ul> <p>Example: <pre><code>def test_process_image_from_file(sample_image, temp_dir):\n    \"\"\"Test processing an image from file path.\"\"\"\n    result = process_lithic_drawing_improved(\n        image_path=str(sample_image),\n        output_folder=str(temp_dir),\n        save_debug=False\n    )\n\n    assert result is not None\n    assert isinstance(result, np.ndarray)\n    assert result.shape == (100, 100)\n</code></pre></p>"},{"location":"developer/testing/#2-annotation-tests-test_annotationspy","title":"2. Annotation Tests (<code>test_annotations.py</code>)","text":"<p>Tests the arrow annotation system:</p> <ul> <li>Arrow creation and customization</li> <li>Detection status calculations  </li> <li>Canvas widget functionality</li> <li>Coordinate mapping between view and image</li> <li>DPI-aware arrow sizing</li> </ul> <p>Example: <pre><code>def test_arrow_detection_status():\n    \"\"\"Test arrow detection status calculation.\"\"\"\n    small_arrow = Arrow(size=10)\n    assert small_arrow.get_detection_status() == \"error\"\n\n    large_arrow = Arrow(size=100)\n    assert large_arrow.get_detection_status() == \"good\"\n</code></pre></p>"},{"location":"developer/testing/#3-cli-tests-test_clipy","title":"3. CLI Tests (<code>test_cli.py</code>)","text":"<p>Tests the command-line interface:</p> <ul> <li>Argument parsing for all commands</li> <li>File validation and error handling</li> <li>Help system functionality</li> <li>Documentation commands</li> <li>Process workflow integration</li> </ul> <p>Example: <pre><code>def test_process_command():\n    \"\"\"Test process command parsing.\"\"\"\n    parser = create_parser()\n    args = parser.parse_args(['process', 'image.png', '--debug'])\n\n    assert args.command == 'process'\n    assert args.input_image == 'image.png'\n    assert args.debug == True\n</code></pre></p>"},{"location":"developer/testing/#4-gui-tests-test_guipy","title":"4. GUI Tests (<code>test_gui.py</code>)","text":"<p>Tests the graphical interface:</p> <ul> <li>Window creation and initialization</li> <li>Widget existence and configuration</li> <li>Button states and interactions</li> <li>Processing thread functionality</li> <li>Canvas operations</li> </ul> <p>Example: <pre><code>def test_gui_creation(qapp):\n    \"\"\"Test creating main GUI window.\"\"\"\n    window = LithicProcessorGUI()\n    assert window is not None\n    assert window.windowTitle() == \"Lithic Editor and Annotator\"\n</code></pre></p>"},{"location":"developer/testing/#test-fixtures","title":"Test Fixtures","text":""},{"location":"developer/testing/#available-fixtures","title":"Available Fixtures","text":"<p>Defined in <code>conftest.py</code>:</p>"},{"location":"developer/testing/#qapp","title":"<code>qapp</code>","text":"<p>PyQt5 QApplication instance for GUI tests.</p>"},{"location":"developer/testing/#temp_dir","title":"<code>temp_dir</code>","text":"<p>Temporary directory that's automatically cleaned up.</p>"},{"location":"developer/testing/#sample_image","title":"<code>sample_image</code>","text":"<p>100x100 pixel test image with horizontal lines and a vertical line.</p>"},{"location":"developer/testing/#sample_image_with_dpi","title":"<code>sample_image_with_dpi</code>","text":"<p>300x300 pixel test image with DPI metadata.</p>"},{"location":"developer/testing/#sample_numpy_array","title":"<code>sample_numpy_array</code>","text":"<p>NumPy array representing a test image.</p>"},{"location":"developer/testing/#sample_pixmap","title":"<code>sample_pixmap</code>","text":"<p>QPixmap for GUI testing.</p>"},{"location":"developer/testing/#using-fixtures","title":"Using Fixtures","text":"<pre><code>def test_with_fixtures(sample_image, temp_dir):\n    \"\"\"Example test using fixtures.\"\"\"\n    # sample_image is automatically created\n    # temp_dir is automatically created and cleaned up\n\n    result = process_image(str(sample_image))\n\n    output_file = temp_dir / \"result.png\"\n    save_image(result, output_file)\n\n    assert output_file.exists()\n</code></pre>"},{"location":"developer/testing/#writing-new-tests","title":"Writing New Tests","text":""},{"location":"developer/testing/#test-naming","title":"Test Naming","text":"<ul> <li>File names: <code>test_*.py</code></li> <li>Class names: <code>TestClassName</code></li> <li>Function names: <code>test_function_name</code></li> <li>Use descriptive names that explain what's being tested</li> </ul>"},{"location":"developer/testing/#test-structure_1","title":"Test Structure","text":"<pre><code>class TestFeature:\n    \"\"\"Test suite for Feature.\"\"\"\n\n    def test_basic_functionality(self):\n        \"\"\"Test basic feature works.\"\"\"\n        # Arrange\n        feature = Feature()\n\n        # Act\n        result = feature.do_something()\n\n        # Assert\n        assert result is not None\n\n    def test_edge_case(self):\n        \"\"\"Test feature handles edge case.\"\"\"\n        # Test implementation\n        pass\n\n    def test_error_handling(self):\n        \"\"\"Test feature handles errors gracefully.\"\"\"\n        with pytest.raises(ValueError):\n            Feature().invalid_operation()\n</code></pre>"},{"location":"developer/testing/#best-practices","title":"Best Practices","text":"<ol> <li>One concept per test: Each test should focus on one specific behavior</li> <li>Descriptive names: Test names should clearly indicate what they test</li> <li>Use fixtures: Reuse common setup through fixtures</li> <li>Mock external dependencies: Use <code>unittest.mock</code> for external services</li> <li>Test both success and failure: Include error cases and edge conditions</li> <li>Keep tests fast: Avoid unnecessary file I/O or network calls</li> </ol>"},{"location":"developer/testing/#continuous-integration","title":"Continuous Integration","text":""},{"location":"developer/testing/#github-actions","title":"GitHub Actions","text":"<p>Tests run automatically on:</p> <ul> <li>Every push to main branch</li> <li>Every pull request</li> <li>Multiple platforms: Windows, macOS, Linux</li> <li>Multiple Python versions: 3.7-3.11</li> </ul>"},{"location":"developer/testing/#configuration","title":"Configuration","text":"<p>See <code>.github/workflows/tests.yml</code> for the complete CI configuration.</p>"},{"location":"developer/testing/#special-considerations","title":"Special Considerations","text":"<p>Linux CI (headless): <pre><code>export QT_QPA_PLATFORM=offscreen\nxvfb-run -a pytest\n</code></pre></p> <p>Cross-platform testing: - Uses virtual display on Linux - Handles platform-specific PyQt5 differences - Tests file path handling across platforms</p>"},{"location":"developer/testing/#coverage-goals","title":"Coverage Goals","text":""},{"location":"developer/testing/#current-coverage","title":"Current Coverage","text":"<p>Run with coverage to see current status: <pre><code>pytest --cov=lithic_editor --cov-report=html\nopen htmlcov/index.html\n</code></pre></p>"},{"location":"developer/testing/#target-coverage","title":"Target Coverage","text":"<ul> <li>Overall: 80%+</li> <li>Processing module: 90%+</li> <li>CLI module: 85%+</li> <li>GUI module: 70%+ (some interactions hard to test)</li> </ul>"},{"location":"developer/testing/#improving-coverage","title":"Improving Coverage","text":"<p>Focus areas for improvement: - Error handling paths - Edge cases in image processing - GUI interaction flows - File I/O error conditions</p>"},{"location":"developer/testing/#debugging-tests","title":"Debugging Tests","text":""},{"location":"developer/testing/#running-specific-tests","title":"Running Specific Tests","text":"<pre><code># Run one test\npytest tests/test_processing.py::TestProcessingModule::test_specific_case -v\n\n# Run tests matching pattern\npytest -k \"test_arrow\" -v\n\n# Stop on first failure\npytest -x\n\n# Show local variables on failure\npytest --tb=long\n</code></pre>"},{"location":"developer/testing/#test-debugging","title":"Test Debugging","text":"<pre><code>def test_debug_example():\n    \"\"\"Example test with debugging.\"\"\"\n    import pdb; pdb.set_trace()  # Debugger breakpoint\n\n    result = function_to_test()\n\n    # Or use print statements\n    print(f\"Result: {result}\")\n\n    assert result == expected\n</code></pre>"},{"location":"developer/testing/#common-issues","title":"Common Issues","text":"<p>PyQt5 issues: - Ensure QApplication exists (use <code>qapp</code> fixture) - Set <code>QT_QPA_PLATFORM=offscreen</code> for headless testing</p> <p>File permissions: - Use <code>temp_dir</code> fixture for file operations - Clean up resources in teardown</p> <p>Import errors: - Install package in development mode: <code>pip install -e .</code> - Check Python path includes project directory</p>"},{"location":"developer/testing/#performance-testing","title":"Performance Testing","text":""},{"location":"developer/testing/#benchmarking","title":"Benchmarking","text":"<pre><code>import time\n\ndef test_processing_performance(sample_image):\n    \"\"\"Test processing performance.\"\"\"\n    start_time = time.time()\n\n    result = process_lithic_drawing_improved(str(sample_image))\n\n    end_time = time.time()\n    processing_time = end_time - start_time\n\n    # Should process in reasonable time\n    assert processing_time &lt; 30.0  # 30 seconds max\n    assert result is not None\n</code></pre>"},{"location":"developer/testing/#memory-testing","title":"Memory Testing","text":"<pre><code>import psutil\nimport os\n\ndef test_memory_usage(large_sample_image):\n    \"\"\"Test memory usage stays reasonable.\"\"\"\n    process = psutil.Process(os.getpid())\n    initial_memory = process.memory_info().rss\n\n    result = process_lithic_drawing_improved(str(large_sample_image))\n\n    final_memory = process.memory_info().rss\n    memory_increase = final_memory - initial_memory\n\n    # Should not use excessive memory (100MB max increase)\n    assert memory_increase &lt; 100 * 1024 * 1024\n</code></pre>"},{"location":"developer/testing/#contributing-tests","title":"Contributing Tests","text":""},{"location":"developer/testing/#before-submitting","title":"Before Submitting","text":"<ol> <li>Run full test suite: <code>pytest</code></li> <li>Check coverage: <code>pytest --cov=lithic_editor</code></li> <li>Verify style: <code>black tests/</code> and <code>flake8 tests/</code></li> <li>Test on your platform: Ensure tests pass locally</li> </ol>"},{"location":"developer/testing/#pull-request-requirements","title":"Pull Request Requirements","text":"<ul> <li>All existing tests must pass</li> <li>New features must include tests</li> <li>Test coverage should not decrease</li> <li>Follow existing test patterns and naming conventions</li> </ul>"},{"location":"developer/testing/#getting-help","title":"Getting Help","text":"<ul> <li>Test Issues: GitHub Issues</li> <li>Test Discussions: GitHub Discussions</li> <li>Documentation: This guide and test docstrings</li> </ul>"},{"location":"getting-started/installation/","title":"Installation","text":""},{"location":"getting-started/installation/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/installation/#minimum-requirements","title":"Minimum Requirements","text":"<ul> <li>Python: 3.7 or higher</li> <li>RAM: 4GB minimum (8GB recommended)</li> <li>Storage: 500MB free space</li> <li>Display: 1280x720 resolution</li> </ul>"},{"location":"getting-started/installation/#operating-systems","title":"Operating Systems","text":"<ul> <li>Windows 10/11</li> <li>macOS 10.15 (Catalina) or later</li> <li>Linux (Ubuntu 20.04+, Fedora 34+, etc.)</li> </ul>"},{"location":"getting-started/installation/#installation-methods","title":"Installation Methods","text":""},{"location":"getting-started/installation/#method-1-install-from-github-recommended","title":"Method 1: Install from GitHub (Recommended)","text":"<p>This method installs the latest stable version directly from the repository.</p> <pre><code># Install directly from GitHub\npip install git+https://github.com/JasonGellis/lithic-editor.git\n</code></pre> <p>To install a specific version:</p> <pre><code># Install a specific release\npip install git+https://github.com/JasonGellis/lithic-editor.git@v1.0.0\n</code></pre>"},{"location":"getting-started/installation/#method-2-development-installation","title":"Method 2: Development Installation","text":"<p>For developers, contributors, or users who want to modify the code:</p> <pre><code># Clone the repository\ngit clone https://github.com/JasonGellis/lithic-editor.git\ncd lithic-editor\n\n# Basic development install (editable mode)\npip install -e .\n\n# Install with test dependencies (recommended for developers)\npip install -e \".[test]\"\n\n# Install with all development tools\npip install -e \".[dev]\"\n\n# Install with documentation tools\npip install -e \".[docs]\"\n\n# Install everything (dev + test + docs)\npip install -e \".[dev,test,docs]\"\n</code></pre>"},{"location":"getting-started/installation/#dependency-groups-explained","title":"Dependency Groups Explained","text":"Group Purpose Includes none Users only Core dependencies for running the app <code>test</code> Running tests pytest, pytest-qt, pytest-cov <code>dev</code> Code quality black, flake8, mypy + test dependencies <code>docs</code> Documentation mkdocs, mkdocs-material + extensions"},{"location":"getting-started/installation/#method-3-install-from-pypi","title":"Method 3: Install from PyPI","text":"<p>Coming Soon</p> <p>PyPI distribution will be available in a future release.</p> <pre><code># Future installation method\npip install lithic-editor\n</code></pre>"},{"location":"getting-started/installation/#dependency-installation","title":"Dependency Installation","text":"<p>All dependencies are automatically installed with the package. However, if you encounter issues, you can manually install them:</p> <pre><code># Core dependencies\npip install numpy opencv-python Pillow PyQt5 scikit-image networkx scipy\n\n# Optional: Documentation dependencies\npip install mkdocs mkdocs-material pymdown-extensions\n</code></pre>"},{"location":"getting-started/installation/#verifying-installation","title":"Verifying Installation","text":"<p>After installation, verify everything is working:</p> <pre><code># Check version\nlithic-editor --version\n\n# Run help command\nlithic-editor --help\n\n# Launch GUI (opens a window)\nlithic-editor --gui\n</code></pre>"},{"location":"getting-started/installation/#troubleshooting","title":"Troubleshooting","text":""},{"location":"getting-started/installation/#common-issues","title":"Common Issues","text":"ImportError: No module named 'PyQt5' <p>Solution: Install PyQt5 manually <pre><code>pip install PyQt5==5.15.9\n</code></pre></p> OpenCV import error <p>Solution: Reinstall OpenCV <pre><code>pip uninstall opencv-python opencv-python-headless\npip install opencv-python\n</code></pre></p> GUI doesn't launch on Linux <p>Solution: Install system dependencies <pre><code># Ubuntu/Debian\nsudo apt-get install python3-pyqt5 libxcb-xinerama0\n\n# Fedora\nsudo dnf install python3-qt5\n</code></pre></p> Permission denied error <p>Solution: Install in user space <pre><code>pip install --user git+https://github.com/JasonGellis/lithic-editor.git\n</code></pre></p>"},{"location":"getting-started/installation/#virtual-environment-setup","title":"Virtual Environment Setup","text":"<p>We recommend using a virtual environment:</p> venvconda <pre><code># Create virtual environment\npython -m venv lithic-env\n\n# Activate it\n# Windows\nlithic-env\\Scripts\\activate\n# macOS/Linux\nsource lithic-env/bin/activate\n\n# Install package\npip install git+https://github.com/JasonGellis/lithic-editor.git\n</code></pre> <pre><code># Create conda environment\nconda create -n lithic python=3.9\nconda activate lithic\n\n# Install package\npip install git+https://github.com/JasonGellis/lithic-editor.git\n</code></pre>"},{"location":"getting-started/installation/#platform-specific-notes","title":"Platform-Specific Notes","text":""},{"location":"getting-started/installation/#macos","title":"macOS","text":"<p>On macOS, you might need to allow the application in Security &amp; Privacy settings the first time you run it.</p>"},{"location":"getting-started/installation/#windows","title":"Windows","text":"<p>Windows users might need to install Visual C++ redistributables if not already present: - Download from Microsoft</p>"},{"location":"getting-started/installation/#linux","title":"Linux","text":"<p>Some Linux distributions require additional packages:</p> <pre><code># Ubuntu/Debian\nsudo apt-get install python3-dev python3-pip python3-venv\n\n# Fedora\nsudo dnf install python3-devel\n\n# Arch\nsudo pacman -S python python-pip\n</code></pre>"},{"location":"getting-started/installation/#updating","title":"Updating","text":"<p>To update to the latest version:</p> <pre><code># Update from GitHub\npip install --upgrade git+https://github.com/JasonGellis/lithic-editor.git\n\n# For development installation\ncd lithic-editor\ngit pull\npip install -e . --upgrade\n</code></pre>"},{"location":"getting-started/installation/#uninstallation","title":"Uninstallation","text":"<p>To remove Lithic Editor:</p> <pre><code>pip uninstall lithic-editor\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Once installed, proceed to the Quick Start Guide to process your first lithic drawing!</p>"},{"location":"getting-started/quickstart/","title":"Quick Start Guide","text":"<p>This guide will help you process your first lithic drawing in under 5 minutes!</p>"},{"location":"getting-started/quickstart/#launch-the-application","title":"Launch the Application","text":"<p>After installation, launch Lithic Editor:</p> <pre><code>lithic-editor --gui\n</code></pre> <p>The main window will open with four panels:</p> <ol> <li>Input Image - Original drawing</li> <li>Processed Image - Cleaned result</li> <li>Arrow Annotations - Annotation canvas</li> <li>Processing Steps - Debug visualization</li> </ol>"},{"location":"getting-started/quickstart/#step-1-load-your-image","title":"Step 1: Load Your Image","text":"<p>Click the \"Load Image\" button and select a lithic drawing file.</p> <p>Supported Formats</p> <ul> <li>PNG (recommended)</li> <li>JPEG/JPG</li> <li>TIFF/TIF</li> <li>BMP</li> </ul> <p>The image will appear in the Input Image panel.</p>"},{"location":"getting-started/quickstart/#step-2-process-the-image","title":"Step 2: Process the Image","text":"<p>Click the \"Process Image\" button to remove ripple lines.</p> <p>The algorithm will: 1. Analyze the drawing structure 2. Identify ripple patterns 3. Remove ripple lines 4. Preserve structural elements</p> <p>Processing Time</p> <p>Processing typically takes 5-30 seconds depending on image size and complexity.</p>"},{"location":"getting-started/quickstart/#step-3-add-annotations-optional","title":"Step 3: Add Annotations (Optional)","text":"<p>After processing, you can add directional arrows:</p>"},{"location":"getting-started/quickstart/#adding-arrows","title":"Adding Arrows","text":"<ol> <li>Click \"Add Arrow\" - An arrow appears in the center</li> <li>Drag to position it over a feature</li> <li>Shift+drag to rotate to the desired angle</li> <li>Alt/Option+drag to resize</li> </ol>"},{"location":"getting-started/quickstart/#customizing-arrows","title":"Customizing Arrows","text":"<ul> <li>Click \"Arrow Color\" to change color</li> <li>Click \"Delete Arrow\" to remove selected arrow</li> <li>Click \"Clear Arrows\" to remove all arrows</li> </ul>"},{"location":"getting-started/quickstart/#step-4-save-your-result","title":"Step 4: Save Your Result","text":"<p>Click \"Save Result\" to export your processed image.</p>"},{"location":"getting-started/quickstart/#save-options","title":"Save Options","text":"<ul> <li>Format: Choose PNG, JPEG, or TIFF</li> <li>Location: Select output folder</li> <li>Filename: Choose descriptive name</li> </ul>"},{"location":"getting-started/quickstart/#complete-example","title":"Complete Example","text":"<p>Here's a complete workflow:</p> <pre><code># Using the Python API instead of GUI\nfrom lithic_editor.processing import process_lithic_drawing_improved\n\n# Process the image\nresult = process_lithic_drawing_improved(\n    \"lithic_artifact.png\",\n    output_folder=\"results/\",\n    save_debug=False  # Set True to save intermediate steps\n)\n\nprint(\"Processing complete!\")\n</code></pre>"},{"location":"getting-started/quickstart/#tips-for-best-results","title":"Tips for Best Results","text":""},{"location":"getting-started/quickstart/#image-quality","title":"Image Quality","text":"<ul> <li>Use high-resolution scans (300+ DPI)</li> <li>Ensure good contrast between lines and background</li> <li>Clean, black lines on white background work best</li> </ul>"},{"location":"getting-started/quickstart/#pre-processing","title":"Pre-Processing","text":"<p>If your image has issues: 1. Use the brush tool to clean up artifacts 2. Remove any text or scale bars before processing 3. Ensure the drawing is properly oriented</p>"},{"location":"getting-started/quickstart/#arrow-annotations","title":"Arrow Annotations","text":"<ul> <li>Use consistent arrow sizes for professional appearance</li> <li>Match arrow direction to striking patterns</li> <li>Consider using different colors for different features</li> </ul>"},{"location":"getting-started/quickstart/#keyboard-shortcuts","title":"Keyboard Shortcuts","text":"Action Windows/Linux macOS Add Arrow Ctrl+A Cmd+A Delete Arrow Delete Delete Save Result Ctrl+S Cmd+S Load Image Ctrl+O Cmd+O Quit Ctrl+Q Cmd+Q"},{"location":"getting-started/quickstart/#command-line-quick-start","title":"Command Line Quick Start","text":"<p>For batch processing or automation:</p> <pre><code># Process a single image\nlithic-editor process drawing.png\n\n# Process with debug output\nlithic-editor process drawing.png --debug\n\n# Specify output directory\nlithic-editor process drawing.png --output results/\n\n# Process quietly (no console output)\nlithic-editor process drawing.png --quiet\n</code></pre>"},{"location":"getting-started/quickstart/#troubleshooting","title":"Troubleshooting","text":"Image doesn't load <ul> <li>Check file format is supported</li> <li>Ensure file isn't corrupted</li> <li>Try converting to PNG format</li> </ul> Processing takes too long <ul> <li>Reduce image size (resize to max 4000px)</li> <li>Close other applications</li> <li>Check available RAM</li> </ul> Arrows don't appear <ul> <li>Ensure image is processed first</li> <li>Click \"Add Arrow\" button</li> <li>Check arrow color isn't same as background</li> </ul>"},{"location":"getting-started/quickstart/#whats-next","title":"What's Next?","text":"<ul> <li>Learn about advanced processing options</li> <li>Explore annotation techniques</li> <li>Read the full user guide</li> </ul>"},{"location":"getting-started/quickstart/#getting-help","title":"Getting Help","text":"<p>If you encounter issues:</p> <ol> <li>Check the User Guide</li> <li>Search GitHub Issues</li> <li>Ask in Discussions</li> <li>Contact: jg760@cam.ac.uk</li> </ol>"},{"location":"getting-started/requirements/","title":"Requirements","text":""},{"location":"getting-started/requirements/#system-requirements","title":"System Requirements","text":""},{"location":"getting-started/requirements/#minimum-specifications","title":"Minimum Specifications","text":"<ul> <li>Processor: Dual-core CPU (2.0 GHz or faster)</li> <li>Memory: 4 GB RAM</li> <li>Storage: 500 MB available space</li> <li>Display: 1280\u00d7720 resolution</li> <li>Graphics: OpenGL 2.0 support</li> </ul>"},{"location":"getting-started/requirements/#recommended-specifications","title":"Recommended Specifications","text":"<ul> <li>Processor: Quad-core CPU (3.0 GHz or faster)</li> <li>Memory: 8 GB RAM or more</li> <li>Storage: 2 GB available space</li> <li>Display: 1920\u00d71080 resolution or higher</li> <li>Graphics: Dedicated graphics card</li> </ul>"},{"location":"getting-started/requirements/#software-requirements","title":"Software Requirements","text":""},{"location":"getting-started/requirements/#python-version","title":"Python Version","text":"<ul> <li>Minimum: Python 3.7</li> <li>Recommended: Python 3.9 or later</li> <li>Maximum tested: Python 3.11</li> </ul>"},{"location":"getting-started/requirements/#operating-systems","title":"Operating Systems","text":"WindowsmacOSLinux <ul> <li>Windows 10 (64-bit) or later</li> <li>Windows 11 fully supported</li> <li>Requires Visual C++ Redistributable</li> </ul> <ul> <li>macOS 10.15 Catalina or later</li> <li>Apple Silicon (M1/M2) supported</li> <li>Intel Macs supported</li> </ul> <ul> <li>Ubuntu 20.04 LTS or later</li> <li>Fedora 34 or later</li> <li>Debian 11 or later</li> <li>Other distributions with Qt5 support</li> </ul>"},{"location":"getting-started/requirements/#python-dependencies","title":"Python Dependencies","text":"<p>All dependencies are automatically installed with the package:</p> Package Version Purpose numpy \u22651.20.0 Numerical operations opencv-python \u22654.5.0 Image processing Pillow \u22658.0.0 Image I/O PyQt5 \u22655.15.0 GUI framework scikit-image \u22650.18.0 Advanced image processing networkx \u22652.5 Graph algorithms scipy \u22651.7.0 Scientific computing"},{"location":"getting-started/requirements/#optional-dependencies","title":"Optional Dependencies","text":""},{"location":"getting-started/requirements/#for-development","title":"For Development","text":"<ul> <li>pytest (\u22656.0) - Testing framework</li> <li>black (\u226521.0) - Code formatting</li> <li>flake8 (\u22653.8) - Code linting</li> <li>mypy (\u22650.800) - Type checking</li> </ul>"},{"location":"getting-started/requirements/#for-documentation","title":"For Documentation","text":"<ul> <li>mkdocs (\u22651.5.0) - Documentation generator</li> <li>mkdocs-material (\u22659.0.0) - Material theme</li> <li>pymdown-extensions (\u226510.0) - Markdown extensions</li> </ul>"},{"location":"getting-started/requirements/#image-format-support","title":"Image Format Support","text":""},{"location":"getting-started/requirements/#input-formats","title":"Input Formats","text":"<ul> <li>PNG - Recommended, lossless</li> <li>JPEG/JPG - Widely supported</li> <li>TIFF/TIF - Professional quality</li> <li>BMP - Uncompressed</li> </ul>"},{"location":"getting-started/requirements/#output-formats","title":"Output Formats","text":"<ul> <li>PNG - Best for web and presentations</li> <li>JPEG - Best for publications</li> <li>TIFF - Best for archival</li> </ul>"},{"location":"getting-started/requirements/#performance-considerations","title":"Performance Considerations","text":""},{"location":"getting-started/requirements/#image-size-recommendations","title":"Image Size Recommendations","text":"<ul> <li>Optimal: 2000-3000 pixels maximum dimension</li> <li>Maximum: 8000 pixels (may be slow)</li> <li>DPI: 300 DPI for best quality</li> </ul>"},{"location":"getting-started/requirements/#memory-usage","title":"Memory Usage","text":"<p>Memory usage depends on image size: - 2000\u00d72000 image: ~50 MB - 4000\u00d74000 image: ~200 MB - 8000\u00d78000 image: ~800 MB</p>"},{"location":"getting-started/requirements/#network-requirements","title":"Network Requirements","text":"<ul> <li>No internet connection required for core functionality</li> <li>Internet needed only for:</li> <li>Installation from GitHub</li> <li>Downloading updates</li> <li>Accessing online documentation</li> </ul>"},{"location":"getting-started/requirements/#compatibility-notes","title":"Compatibility Notes","text":""},{"location":"getting-started/requirements/#known-compatible-ides","title":"Known Compatible IDEs","text":"<ul> <li>Visual Studio Code</li> <li>PyCharm</li> <li>Jupyter Notebook/Lab</li> <li>Spyder</li> <li>Sublime Text</li> </ul>"},{"location":"getting-started/requirements/#virtual-environments","title":"Virtual Environments","text":"<p>Compatible with: - venv - virtualenv - conda/miniconda - poetry - pipenv</p>"},{"location":"getting-started/requirements/#checking-your-system","title":"Checking Your System","text":"<p>To verify your system meets the requirements:</p> <pre><code>import sys\nimport platform\n\nprint(f\"Python version: {sys.version}\")\nprint(f\"Platform: {platform.platform()}\")\nprint(f\"Architecture: {platform.machine()}\")\nprint(f\"Processor: {platform.processor()}\")\n\n# Check for required packages\nrequired = ['numpy', 'cv2', 'PIL', 'PyQt5', 'skimage', 'networkx', 'scipy']\nfor package in required:\n    try:\n        __import__(package)\n        print(f\"\u2713 {package} installed\")\n    except ImportError:\n        print(f\"\u2717 {package} missing\")\n</code></pre>"},{"location":"getting-started/requirements/#troubleshooting-requirements","title":"Troubleshooting Requirements","text":"<p>If you encounter issues:</p> <ol> <li>Update pip: <code>pip install --upgrade pip</code></li> <li>Update setuptools: <code>pip install --upgrade setuptools wheel</code></li> <li>Check Python version: <code>python --version</code></li> <li>Verify 64-bit Python: <code>python -c \"import sys; print(sys.maxsize &gt; 2**32)\"</code></li> </ol> <p>For platform-specific issues, see the Installation Guide.</p>"},{"location":"user-guide/overview/","title":"User Guide Overview","text":""},{"location":"user-guide/overview/#introduction","title":"Introduction","text":"<p>This comprehensive guide covers all aspects of using Lithic Editor and Annotator for processing archaeological lithic drawings. Whether you're new to the software or looking to master advanced features, this guide will help you achieve professional results.</p>"},{"location":"user-guide/overview/#workflow-overview","title":"Workflow Overview","text":"<p>The typical workflow for processing lithic drawings follows these steps:</p> <pre><code>graph LR\n    A[Load Image] --&gt; B[Pre-Process]\n    B --&gt; C[Remove Ripples]\n    C --&gt; D[Add Annotations]\n    D --&gt; E[Save Result]</code></pre>"},{"location":"user-guide/overview/#main-interface","title":"Main Interface","text":"<p>The Lithic Editor interface is divided into four main sections:</p>"},{"location":"user-guide/overview/#1-input-panel-top-left","title":"1. Input Panel (Top Left)","text":"<ul> <li>Displays the original image</li> <li>Provides editing tools for cleanup</li> <li>Shows image information (size, DPI)</li> </ul>"},{"location":"user-guide/overview/#2-processed-panel-top-right","title":"2. Processed Panel (Top Right)","text":"<ul> <li>Shows the cleaned image after ripple removal</li> <li>Updates in real-time during processing</li> <li>Maintains original image quality</li> </ul>"},{"location":"user-guide/overview/#3-annotation-panel-bottom-left","title":"3. Annotation Panel (Bottom Left)","text":"<ul> <li>Canvas for adding directional arrows</li> <li>Interactive arrow manipulation</li> <li>Color and size controls</li> </ul>"},{"location":"user-guide/overview/#4-debug-panel-bottom-right","title":"4. Debug Panel (Bottom Right)","text":"<ul> <li>Displays processing steps</li> <li>Shows algorithm visualization</li> <li>Helps understand the cleaning process</li> </ul>"},{"location":"user-guide/overview/#core-functions","title":"Core Functions","text":""},{"location":"user-guide/overview/#image-loading","title":"Image Loading","text":"<ul> <li>Support for multiple formats</li> <li>Automatic DPI detection</li> <li>Image validation and error checking</li> </ul>"},{"location":"user-guide/overview/#processing-engine","title":"Processing Engine","text":"<ul> <li>Graph-based line analysis</li> <li>Pattern recognition algorithms</li> <li>Structural preservation logic</li> </ul>"},{"location":"user-guide/overview/#annotation-system","title":"Annotation System","text":"<ul> <li>Vector-based arrows</li> <li>DPI-aware sizing</li> <li>Export-ready graphics</li> </ul>"},{"location":"user-guide/overview/#navigation","title":"Navigation","text":"<p>Use the sidebar to explore specific topics:</p> <ul> <li>Processing Images - Detailed processing guide</li> <li>Adding Annotations - Arrow annotation techniques</li> <li>Saving Results - Export options and formats</li> <li>Keyboard Shortcuts - Productivity tips</li> </ul>"},{"location":"user-guide/overview/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/overview/#for-optimal-results","title":"For Optimal Results","text":"<ol> <li>Image Preparation</li> <li>Use high-resolution scans (300+ DPI)</li> <li>Ensure good contrast</li> <li> <p>Remove unnecessary elements</p> </li> <li> <p>Processing Settings</p> </li> <li>Enable debug mode for complex images</li> <li>Review intermediate steps</li> <li> <p>Adjust parameters if needed</p> </li> <li> <p>Annotation Guidelines</p> </li> <li>Maintain consistent arrow sizes</li> <li>Use appropriate colors</li> <li>Align with archaeological standards</li> </ol>"},{"location":"user-guide/overview/#common-workflows","title":"Common Workflows","text":""},{"location":"user-guide/overview/#single-image-processing","title":"Single Image Processing","text":"<ol> <li>Load image</li> <li>Process</li> <li>Annotate</li> <li>Save</li> </ol>"},{"location":"user-guide/overview/#batch-processing","title":"Batch Processing","text":"<ol> <li>Prepare image folder</li> <li>Use CLI for batch operations</li> <li>Review results</li> <li>Apply annotations as needed</li> </ol>"},{"location":"user-guide/overview/#research-documentation","title":"Research Documentation","text":"<ol> <li>Process with debug enabled</li> <li>Save all intermediate steps</li> <li>Document parameters used</li> <li>Archive original and processed versions</li> </ol>"},{"location":"user-guide/overview/#understanding-the-algorithm","title":"Understanding the Algorithm","text":"<p>The ripple removal algorithm works through several stages:</p>"},{"location":"user-guide/overview/#stage-1-skeletonization","title":"Stage 1: Skeletonization","text":"<p>Reduces lines to single-pixel width while preserving connectivity.</p>"},{"location":"user-guide/overview/#stage-2-graph-construction","title":"Stage 2: Graph Construction","text":"<p>Builds a network representation of line segments.</p>"},{"location":"user-guide/overview/#stage-3-pattern-analysis","title":"Stage 3: Pattern Analysis","text":"<p>Identifies ripple patterns based on: - Line orientation - Spacing consistency - Length distribution</p>"},{"location":"user-guide/overview/#stage-4-selective-removal","title":"Stage 4: Selective Removal","text":"<p>Removes identified ripple lines while preserving: - Structural boundaries - Tool edges - Important features</p>"},{"location":"user-guide/overview/#stage-5-enhancement","title":"Stage 5: Enhancement","text":"<p>Cleans up the result and restores line quality.</p>"},{"location":"user-guide/overview/#tips-and-tricks","title":"Tips and Tricks","text":"<p>Quick Processing</p> <p>For faster processing of large images, resize to 2000-3000px maximum dimension first.</p> <p>Arrow Visibility</p> <p>Use contrasting colors for arrows - black on light backgrounds, white on dark.</p> <p>Batch Operations</p> <p>Use the CLI for processing multiple images with consistent settings.</p> <p>Quality Control</p> <p>Always review the debug steps to ensure important features aren't removed.</p>"},{"location":"user-guide/overview/#troubleshooting-guide","title":"Troubleshooting Guide","text":""},{"location":"user-guide/overview/#processing-issues","title":"Processing Issues","text":"Problem Solution Structural lines removed Adjust algorithm sensitivity Ripples not fully removed Check image contrast Processing too slow Reduce image size Memory errors Close other applications"},{"location":"user-guide/overview/#annotation-issues","title":"Annotation Issues","text":"Problem Solution Arrows too small Increase DPI setting Can't select arrow Click closer to arrow center Arrows disappear Check arrow color vs background"},{"location":"user-guide/overview/#getting-support","title":"Getting Support","text":"<p>If you need help:</p> <ol> <li>Check Documentation: Review relevant guide sections</li> <li>GitHub Issues: Search existing issues or create new one</li> <li>Community Forum: Ask in GitHub Discussions</li> <li>Direct Contact: Email jg760@cam.ac.uk for research inquiries</li> </ol>"},{"location":"user-guide/overview/#next-steps","title":"Next Steps","text":"<ul> <li>Continue to Processing Images for detailed processing instructions</li> <li>Jump to Annotations to master arrow tools</li> <li>Explore Saving Options for export settings</li> </ul>"},{"location":"user-guide/processing/","title":"Processing Images","text":""},{"location":"user-guide/processing/#overview","title":"Overview","text":"<p>The image processing engine in Lithic Editor uses advanced algorithms to automatically identify and remove ripple lines while preserving the structural elements of lithic drawings.</p>"},{"location":"user-guide/processing/#loading-images","title":"Loading Images","text":""},{"location":"user-guide/processing/#supported-formats","title":"Supported Formats","text":"<ul> <li>PNG (recommended): Lossless compression, transparency support</li> <li>JPEG/JPG: Widely compatible, smaller file sizes</li> <li>TIFF/TIF: Professional quality, uncompressed</li> <li>BMP: Simple format, uncompressed</li> </ul>"},{"location":"user-guide/processing/#image-requirements","title":"Image Requirements","text":"<p>For best results, your images should have: - High contrast (black lines on white background) - Resolution of at least 300 DPI - Clean, continuous lines - Minimal noise or artifacts</p>"},{"location":"user-guide/processing/#processing-algorithm","title":"Processing Algorithm","text":""},{"location":"user-guide/processing/#how-it-works","title":"How It Works","text":"<p>The ripple removal algorithm follows these steps:</p> <ol> <li>Image Preprocessing</li> <li>Convert to grayscale if needed</li> <li>Apply threshold to create binary image</li> <li> <p>Remove small noise artifacts</p> </li> <li> <p>Skeletonization</p> </li> <li>Reduce lines to single-pixel width</li> <li>Preserve connectivity and topology</li> <li> <p>Create network representation</p> </li> <li> <p>Line Analysis</p> </li> <li>Detect individual line segments</li> <li>Calculate orientation and length</li> <li> <p>Build connectivity graph</p> </li> <li> <p>Ripple Detection</p> </li> <li>Identify parallel line patterns</li> <li>Analyze spacing consistency</li> <li> <p>Classify as ripple or structural</p> </li> <li> <p>Selective Removal</p> </li> <li>Remove identified ripple lines</li> <li>Preserve structural boundaries</li> <li>Maintain artifact integrity</li> </ol>"},{"location":"user-guide/processing/#using-the-gui","title":"Using the GUI","text":""},{"location":"user-guide/processing/#step-by-step-processing","title":"Step-by-Step Processing","text":"<ol> <li> <p>Load Your Image <pre><code>Click \"Load Image\" \u2192 Select file \u2192 Open\n</code></pre></p> </li> <li> <p>Review Input</p> </li> <li>Check image quality in Input panel</li> <li>Verify correct orientation</li> <li> <p>Note any problem areas</p> </li> <li> <p>Process Image <pre><code>Click \"Process Image\" \u2192 Wait for completion\n</code></pre></p> </li> <li> <p>Review Results</p> </li> <li>Compare before/after</li> <li>Check debug steps if enabled</li> <li>Verify structural preservation</li> </ol>"},{"location":"user-guide/processing/#processing-options","title":"Processing Options","text":""},{"location":"user-guide/processing/#debug-mode","title":"Debug Mode","text":"<p>Enable to save intermediate processing steps: - Checkbox: \"Save debug images\" - Creates <code>image_debug/</code> folder - Saves all algorithm stages</p>"},{"location":"user-guide/processing/#quality-settings","title":"Quality Settings","text":"<p>Adjust processing parameters: - Line thickness tolerance - Ripple pattern sensitivity - Structural preservation level</p>"},{"location":"user-guide/processing/#command-line-processing","title":"Command Line Processing","text":""},{"location":"user-guide/processing/#basic-usage","title":"Basic Usage","text":"<pre><code># Process single image\nlithic-editor process input.png\n\n# Specify output directory\nlithic-editor process input.png --output results/\n\n# Enable debug mode\nlithic-editor process input.png --debug\n</code></pre>"},{"location":"user-guide/processing/#batch-processing","title":"Batch Processing","text":"<pre><code># Process all PNG files\nfor file in *.png; do\n    lithic-editor process \"$file\" --output processed/\ndone\n\n# Process with parallel jobs\nfind . -name \"*.png\" | parallel lithic-editor process {} --quiet\n</code></pre>"},{"location":"user-guide/processing/#advanced-options","title":"Advanced Options","text":"<pre><code># Custom parameters\nlithic-editor process image.png \\\n    --output results/ \\\n    --debug \\\n    --threshold 127 \\\n    --min-line-length 10\n</code></pre>"},{"location":"user-guide/processing/#python-api","title":"Python API","text":""},{"location":"user-guide/processing/#basic-processing","title":"Basic Processing","text":"<pre><code>from lithic_editor.processing import process_lithic_drawing_improved\n\n# Process with default settings\nresult = process_lithic_drawing_improved(\"drawing.png\")\n\n# Process with custom output\nresult = process_lithic_drawing_improved(\n    image_path=\"drawing.png\",\n    output_folder=\"results/\",\n    save_debug=True\n)\n</code></pre>"},{"location":"user-guide/processing/#advanced-usage","title":"Advanced Usage","text":"<pre><code>import numpy as np\nfrom lithic_editor.processing import process_lithic_drawing_improved\n\n# Process numpy array\nimage_array = np.array(...)  # Your image data\nresult = process_lithic_drawing_improved(\n    image_path=image_array,\n    dpi_info=(300, 300),\n    save_debug=False\n)\n\n# Access processing stages\nstages = result.get('debug_stages', [])\nfor stage_name, stage_image in stages:\n    print(f\"Stage: {stage_name}\")\n    # Process stage_image\n</code></pre>"},{"location":"user-guide/processing/#troubleshooting","title":"Troubleshooting","text":""},{"location":"user-guide/processing/#common-issues","title":"Common Issues","text":"Structural lines are removed <p>Causes: - Lines too similar to ripple pattern - Incorrect threshold settings</p> <p>Solutions: - Increase structural preservation setting - Manually edit before processing - Use debug mode to identify issue</p> Ripples not fully removed <p>Causes: - Inconsistent ripple pattern - Poor image quality - Ripples too thick</p> <p>Solutions: - Improve scan quality - Pre-process to enhance contrast - Adjust sensitivity settings</p> Processing takes too long <p>Causes: - Image too large - Insufficient memory - Complex line patterns</p> <p>Solutions: - Resize image to 3000px max - Close other applications - Use batch processing overnight</p>"},{"location":"user-guide/processing/#image-preparation-tips","title":"Image Preparation Tips","text":"<ol> <li>Scanning</li> <li>Use 300+ DPI</li> <li>Black and white mode</li> <li> <p>Clean scanner glass</p> </li> <li> <p>Editing</p> </li> <li>Remove text and scales</li> <li>Fill gaps in lines</li> <li> <p>Increase contrast</p> </li> <li> <p>Format</p> </li> <li>Save as PNG</li> <li>Use lossless compression</li> <li>Preserve metadata</li> </ol>"},{"location":"user-guide/processing/#best-practices","title":"Best Practices","text":""},{"location":"user-guide/processing/#quality-control","title":"Quality Control","text":"<p>Always Review Debug Images</p> <p>Enable debug mode for important images to verify the algorithm isn't removing structural elements.</p>"},{"location":"user-guide/processing/#workflow-optimization","title":"Workflow Optimization","text":"<ol> <li>Test on Sample</li> <li>Process small section first</li> <li>Adjust settings as needed</li> <li> <p>Apply to full image</p> </li> <li> <p>Batch Similar Images</p> </li> <li>Group by drawing style</li> <li>Use consistent settings</li> <li> <p>Review results together</p> </li> <li> <p>Archive Originals</p> </li> <li>Keep unprocessed versions</li> <li>Document processing parameters</li> <li>Note any manual edits</li> </ol>"},{"location":"user-guide/processing/#performance-optimization","title":"Performance Optimization","text":""},{"location":"user-guide/processing/#memory-management","title":"Memory Management","text":"<ul> <li>Process images under 4000\u00d74000 pixels</li> <li>Close unnecessary applications</li> <li>Use 64-bit Python</li> </ul>"},{"location":"user-guide/processing/#speed-improvements","title":"Speed Improvements","text":"<ul> <li>Resize large images first</li> <li>Process in batches overnight</li> <li>Use SSD for temp files</li> </ul>"},{"location":"user-guide/processing/#parallel-processing","title":"Parallel Processing","text":"<pre><code>from multiprocessing import Pool\nfrom lithic_editor.processing import process_lithic_drawing_improved\n\ndef process_file(filename):\n    return process_lithic_drawing_improved(filename)\n\nwith Pool(processes=4) as pool:\n    results = pool.map(process_file, file_list)\n</code></pre>"},{"location":"user-guide/processing/#next-steps","title":"Next Steps","text":"<ul> <li>Learn about Adding Annotations</li> <li>Explore Saving Options</li> <li>Read API Reference</li> </ul>"}]}